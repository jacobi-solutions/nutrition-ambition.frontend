#!/usr/bin/env node

/**
 * write-version.js
 * --------------------------------------
 * Best practices version for embedding build info
 * into Angular/Ionic frontend environments.
 *
 * - Uses current commit hash + timestamp
 * - Skips rewrite if unchanged
 * - Generates a warning banner at the top
 */

const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

const versionFile = path.join(__dirname, "../src/environments/version.ts");

function getGitInfo() {
  try {
    const hash = execSync("git rev-parse --short HEAD").toString().trim();
    const branch = execSync("git rev-parse --abbrev-ref HEAD").toString().trim();
    const isoDate = new Date().toISOString().replace(/[-:T.Z]/g, "").slice(0, 12); 
    // e.g. 20250820HHMM

    return { hash, branch, isoDate };
  } catch (err) {
    console.error("⚠️  Unable to read git info. Are you in a git repo?");
    process.exit(1);
  }
}

function buildVersion({ hash, isoDate }) {
  // Example: 0.0.202508201655-abc123
  return `0.0.${isoDate}-${hash}`;
}

function writeVersionFile(version, gitInfo) {
  const banner = `// AUTO-GENERATED FILE. DO NOT EDIT.
// This file was generated by tools/write-version.js
// Commit: ${gitInfo.hash}, Branch: ${gitInfo.branch}, Date: ${gitInfo.isoDate}

export const APP_VERSION = "${version}";
`;

  // Skip write if identical
  if (fs.existsSync(versionFile)) {
    const current = fs.readFileSync(versionFile, "utf8");
    if (current === banner) {
      console.log(`ℹ️  Version unchanged (${version}), skipping write.`);
      return;
    }
  }

  fs.writeFileSync(versionFile, banner, { encoding: "utf8" });
  console.log(`✅ Version updated -> ${version}`);
}

(function main() {
  const gitInfo = getGitInfo();
  const version = buildVersion(gitInfo);
  writeVersionFile(version, gitInfo);
})();
