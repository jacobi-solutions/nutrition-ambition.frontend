//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface INutritionAmbitionApiService {
    /**
     * @param body (optional) 
     * @return Success
     */
    getAccount(body: Request | undefined): Observable<AccountResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    changePassword(body: ChangePasswordRequest | undefined): Observable<Response>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getFeedbackWithAccountInfo(body: GetFeedbackWithAccountInfoRequest | undefined): Observable<GetFeedbackWithAccountInfoResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    completeFeedback(body: CompleteFeedbackRequest | undefined): Observable<CompleteFeedbackResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFeedback(body: DeleteFeedbackRequest | undefined): Observable<DeleteFeedbackResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getUserChatMessages(body: GetUserChatMessagesRequest | undefined): Observable<GetUserChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getChatMessages(body: GetChatMessagesRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    clearChatMessages(body: ClearChatMessagesRequest | undefined): Observable<ClearChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    runResponsesConversation(body: RunChatRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    learnMoreAbout(body: LearnMoreAboutRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getDetailedSummary(body: GetDetailedSummaryRequest | undefined): Observable<GetDetailedSummaryResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    submitFeedback(body: SubmitUserFeedbackRequest | undefined): Observable<SubmitUserFeedbackResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getFeedback(body: GetFeedbackRequest | undefined): Observable<GetFeedbackResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    updateFeedback(body: UpdateFeedbackRequest | undefined): Observable<UpdateFeedbackResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFeedback2(body: DeleteFeedbackRequest | undefined): Observable<DeleteFeedbackResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getAllFeedback(body: GetFeedbackRequest | undefined): Observable<GetFeedbackResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    completeFeedback2(body: CompleteFeedbackRequest | undefined): Observable<CompleteFeedbackResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFoodEntry(body: DeleteFoodEntryRequest | undefined): Observable<DeleteFoodEntryResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    submitServingSelection(body: SubmitServingSelectionRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    cancelFoodLogging(body: CancelServingSelectionRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    startEditSelection(body: EditFoodSelectionRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    submitEditServingSelection(body: SubmitEditServingSelectionRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    cancelEditSelection(body: CancelEditSelectionRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @return Success
     */
    ip(): Observable<void>;
}

@Injectable()
export class NutritionAmbitionApiService implements INutritionAmbitionApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAccount(body: Request | undefined): Observable<AccountResponse> {
        let url_ = this.baseUrl + "/api/Accounts/GetAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAccount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AccountResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AccountResponse>;
        }));
    }

    protected processGetAccount(response: HttpResponseBase): Observable<AccountResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccountResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AccountResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changePassword(body: ChangePasswordRequest | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/Accounts/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<Response> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Response>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getFeedbackWithAccountInfo(body: GetFeedbackWithAccountInfoRequest | undefined): Observable<GetFeedbackWithAccountInfoResponse> {
        let url_ = this.baseUrl + "/api/Admin/GetFeedbackWithAccountInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeedbackWithAccountInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeedbackWithAccountInfo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetFeedbackWithAccountInfoResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetFeedbackWithAccountInfoResponse>;
        }));
    }

    protected processGetFeedbackWithAccountInfo(response: HttpResponseBase): Observable<GetFeedbackWithAccountInfoResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFeedbackWithAccountInfoResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetFeedbackWithAccountInfoResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    completeFeedback(body: CompleteFeedbackRequest | undefined): Observable<CompleteFeedbackResponse> {
        let url_ = this.baseUrl + "/api/Admin/CompleteFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCompleteFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCompleteFeedback(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CompleteFeedbackResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CompleteFeedbackResponse>;
        }));
    }

    protected processCompleteFeedback(response: HttpResponseBase): Observable<CompleteFeedbackResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompleteFeedbackResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CompleteFeedbackResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFeedback(body: DeleteFeedbackRequest | undefined): Observable<DeleteFeedbackResponse> {
        let url_ = this.baseUrl + "/api/Admin/DeleteFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFeedback(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeleteFeedbackResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeleteFeedbackResponse>;
        }));
    }

    protected processDeleteFeedback(response: HttpResponseBase): Observable<DeleteFeedbackResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeleteFeedbackResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeleteFeedbackResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getUserChatMessages(body: GetUserChatMessagesRequest | undefined): Observable<GetUserChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Admin/GetUserChatMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserChatMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserChatMessages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetUserChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetUserChatMessagesResponse>;
        }));
    }

    protected processGetUserChatMessages(response: HttpResponseBase): Observable<GetUserChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetUserChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetUserChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getChatMessages(body: GetChatMessagesRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Conversation/GetChatMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetChatMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetChatMessages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processGetChatMessages(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    clearChatMessages(body: ClearChatMessagesRequest | undefined): Observable<ClearChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Conversation/ClearChatMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClearChatMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearChatMessages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClearChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClearChatMessagesResponse>;
        }));
    }

    protected processClearChatMessages(response: HttpResponseBase): Observable<ClearChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClearChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClearChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    runResponsesConversation(body: RunChatRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Conversation/RunResponsesConversation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRunResponsesConversation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRunResponsesConversation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processRunResponsesConversation(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    learnMoreAbout(body: LearnMoreAboutRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Conversation/LearnMoreAbout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLearnMoreAbout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLearnMoreAbout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processLearnMoreAbout(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getDetailedSummary(body: GetDetailedSummaryRequest | undefined): Observable<GetDetailedSummaryResponse> {
        let url_ = this.baseUrl + "/api/DetailedSummary/GetDetailedSummary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetailedSummary(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetailedSummary(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetDetailedSummaryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetDetailedSummaryResponse>;
        }));
    }

    protected processGetDetailedSummary(response: HttpResponseBase): Observable<GetDetailedSummaryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDetailedSummaryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetDetailedSummaryResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    submitFeedback(body: SubmitUserFeedbackRequest | undefined): Observable<SubmitUserFeedbackResponse> {
        let url_ = this.baseUrl + "/api/Feedback/SubmitFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSubmitFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmitFeedback(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SubmitUserFeedbackResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SubmitUserFeedbackResponse>;
        }));
    }

    protected processSubmitFeedback(response: HttpResponseBase): Observable<SubmitUserFeedbackResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SubmitUserFeedbackResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SubmitUserFeedbackResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getFeedback(body: GetFeedbackRequest | undefined): Observable<GetFeedbackResponse> {
        let url_ = this.baseUrl + "/api/Feedback/GetFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeedback(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetFeedbackResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetFeedbackResponse>;
        }));
    }

    protected processGetFeedback(response: HttpResponseBase): Observable<GetFeedbackResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFeedbackResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetFeedbackResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateFeedback(body: UpdateFeedbackRequest | undefined): Observable<UpdateFeedbackResponse> {
        let url_ = this.baseUrl + "/api/Feedback/UpdateFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFeedback(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UpdateFeedbackResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UpdateFeedbackResponse>;
        }));
    }

    protected processUpdateFeedback(response: HttpResponseBase): Observable<UpdateFeedbackResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateFeedbackResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UpdateFeedbackResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFeedback2(body: DeleteFeedbackRequest | undefined): Observable<DeleteFeedbackResponse> {
        let url_ = this.baseUrl + "/api/Feedback/DeleteFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFeedback2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFeedback2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeleteFeedbackResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeleteFeedbackResponse>;
        }));
    }

    protected processDeleteFeedback2(response: HttpResponseBase): Observable<DeleteFeedbackResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeleteFeedbackResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeleteFeedbackResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAllFeedback(body: GetFeedbackRequest | undefined): Observable<GetFeedbackResponse> {
        let url_ = this.baseUrl + "/api/Feedback/GetAllFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllFeedback(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetFeedbackResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetFeedbackResponse>;
        }));
    }

    protected processGetAllFeedback(response: HttpResponseBase): Observable<GetFeedbackResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFeedbackResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetFeedbackResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    completeFeedback2(body: CompleteFeedbackRequest | undefined): Observable<CompleteFeedbackResponse> {
        let url_ = this.baseUrl + "/api/Feedback/CompleteFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCompleteFeedback2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCompleteFeedback2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CompleteFeedbackResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CompleteFeedbackResponse>;
        }));
    }

    protected processCompleteFeedback2(response: HttpResponseBase): Observable<CompleteFeedbackResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompleteFeedbackResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CompleteFeedbackResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFoodEntry(body: DeleteFoodEntryRequest | undefined): Observable<DeleteFoodEntryResponse> {
        let url_ = this.baseUrl + "/api/FoodEntry/DeleteFoodEntry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFoodEntry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFoodEntry(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeleteFoodEntryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeleteFoodEntryResponse>;
        }));
    }

    protected processDeleteFoodEntry(response: HttpResponseBase): Observable<DeleteFoodEntryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeleteFoodEntryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeleteFoodEntryResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    submitServingSelection(body: SubmitServingSelectionRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/SubmitServingSelection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSubmitServingSelection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmitServingSelection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processSubmitServingSelection(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cancelFoodLogging(body: CancelServingSelectionRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/CancelFoodLogging";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelFoodLogging(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelFoodLogging(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processCancelFoodLogging(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    startEditSelection(body: EditFoodSelectionRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/StartEditSelection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartEditSelection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartEditSelection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processStartEditSelection(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    submitEditServingSelection(body: SubmitEditServingSelectionRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/SubmitEditServingSelection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSubmitEditServingSelection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmitEditServingSelection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processSubmitEditServingSelection(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cancelEditSelection(body: CancelEditSelectionRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/CancelEditSelection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelEditSelection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelEditSelection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processCancelEditSelection(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @return Success
     */
    ip(): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/ip";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIp(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIp(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processIp(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

export class Account implements IAccount {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    name?: string | undefined;
    email?: string | undefined;
    timeZoneId?: string | undefined;
    isOwner?: boolean;
    hasUnacknowledgedFeedbackResponses?: boolean;

    constructor(data?: IAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            this.lastUpdatedDateUtc = _data["lastUpdatedDateUtc"] ? new Date(_data["lastUpdatedDateUtc"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.email = _data["email"];
            this.timeZoneId = _data["timeZoneId"];
            this.isOwner = _data["isOwner"];
            this.hasUnacknowledgedFeedbackResponses = _data["hasUnacknowledgedFeedbackResponses"];
        }
    }

    static fromJS(data: any): Account {
        data = typeof data === 'object' ? data : {};
        let result = new Account();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastUpdatedDateUtc"] = this.lastUpdatedDateUtc ? this.lastUpdatedDateUtc.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["email"] = this.email;
        data["timeZoneId"] = this.timeZoneId;
        data["isOwner"] = this.isOwner;
        data["hasUnacknowledgedFeedbackResponses"] = this.hasUnacknowledgedFeedbackResponses;
        return data;
    }
}

export interface IAccount {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    name?: string | undefined;
    email?: string | undefined;
    timeZoneId?: string | undefined;
    isOwner?: boolean;
    hasUnacknowledgedFeedbackResponses?: boolean;
}

export class AccountResponse implements IAccountResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    account?: Account;

    constructor(data?: IAccountResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.account = _data["account"] ? Account.fromJS(_data["account"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AccountResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["account"] = this.account ? this.account.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAccountResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    account?: Account;
}

export enum AssistantModeTypes {
    Default = "Default",
    GoalSetting = "GoalSetting",
    UserFeedback = "UserFeedback",
}

export class CancelEditSelectionRequest implements ICancelEditSelectionRequest {
    pendingMessageId?: string | undefined;
    loggedDateUtc?: Date;

    constructor(data?: ICancelEditSelectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pendingMessageId = _data["pendingMessageId"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CancelEditSelectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CancelEditSelectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pendingMessageId"] = this.pendingMessageId;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICancelEditSelectionRequest {
    pendingMessageId?: string | undefined;
    loggedDateUtc?: Date;
}

export class CancelServingSelectionRequest implements ICancelServingSelectionRequest {
    pendingMessageId?: string | undefined;
    loggedDateUtc?: Date;

    constructor(data?: ICancelServingSelectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pendingMessageId = _data["pendingMessageId"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CancelServingSelectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CancelServingSelectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pendingMessageId"] = this.pendingMessageId;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICancelServingSelectionRequest {
    pendingMessageId?: string | undefined;
    loggedDateUtc?: Date;
}

export class ChangePasswordRequest implements IChangePasswordRequest {
    newPassword?: string | undefined;

    constructor(data?: IChangePasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IChangePasswordRequest {
    newPassword?: string | undefined;
}

export class ChatMessage implements IChatMessage {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    role?: MessageRoleTypes;
    content?: string | undefined;
    loggedDateUtc?: Date;
    foodEntryId?: string | undefined;
    isRead?: boolean;
    toolCallId?: string | undefined;
    toolFunctionName?: string | undefined;
    toolCallArgumentsJson?: string | undefined;
    responseId?: string | undefined;
    assistantMode?: AssistantModeTypes;
    assistantPhase?: string | undefined;
    logMealToolResponse?: LogMealToolResponse;
    modelUsed?: string | undefined;
    promptTokens?: number | undefined;
    completionTokens?: number | undefined;
    totalTokens?: number | undefined;
    frontendAppVersion?: string | undefined;

    constructor(data?: IChatMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            this.lastUpdatedDateUtc = _data["lastUpdatedDateUtc"] ? new Date(_data["lastUpdatedDateUtc"].toString()) : <any>undefined;
            this.accountId = _data["accountId"];
            this.role = _data["role"];
            this.content = _data["content"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
            this.foodEntryId = _data["foodEntryId"];
            this.isRead = _data["isRead"];
            this.toolCallId = _data["toolCallId"];
            this.toolFunctionName = _data["toolFunctionName"];
            this.toolCallArgumentsJson = _data["toolCallArgumentsJson"];
            this.responseId = _data["responseId"];
            this.assistantMode = _data["assistantMode"];
            this.assistantPhase = _data["assistantPhase"];
            this.logMealToolResponse = _data["logMealToolResponse"] ? LogMealToolResponse.fromJS(_data["logMealToolResponse"]) : <any>undefined;
            this.modelUsed = _data["modelUsed"];
            this.promptTokens = _data["promptTokens"];
            this.completionTokens = _data["completionTokens"];
            this.totalTokens = _data["totalTokens"];
            this.frontendAppVersion = _data["frontendAppVersion"];
        }
    }

    static fromJS(data: any): ChatMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastUpdatedDateUtc"] = this.lastUpdatedDateUtc ? this.lastUpdatedDateUtc.toISOString() : <any>undefined;
        data["accountId"] = this.accountId;
        data["role"] = this.role;
        data["content"] = this.content;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        data["foodEntryId"] = this.foodEntryId;
        data["isRead"] = this.isRead;
        data["toolCallId"] = this.toolCallId;
        data["toolFunctionName"] = this.toolFunctionName;
        data["toolCallArgumentsJson"] = this.toolCallArgumentsJson;
        data["responseId"] = this.responseId;
        data["assistantMode"] = this.assistantMode;
        data["assistantPhase"] = this.assistantPhase;
        data["logMealToolResponse"] = this.logMealToolResponse ? this.logMealToolResponse.toJSON() : <any>undefined;
        data["modelUsed"] = this.modelUsed;
        data["promptTokens"] = this.promptTokens;
        data["completionTokens"] = this.completionTokens;
        data["totalTokens"] = this.totalTokens;
        data["frontendAppVersion"] = this.frontendAppVersion;
        return data;
    }
}

export interface IChatMessage {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    role?: MessageRoleTypes;
    content?: string | undefined;
    loggedDateUtc?: Date;
    foodEntryId?: string | undefined;
    isRead?: boolean;
    toolCallId?: string | undefined;
    toolFunctionName?: string | undefined;
    toolCallArgumentsJson?: string | undefined;
    responseId?: string | undefined;
    assistantMode?: AssistantModeTypes;
    assistantPhase?: string | undefined;
    logMealToolResponse?: LogMealToolResponse;
    modelUsed?: string | undefined;
    promptTokens?: number | undefined;
    completionTokens?: number | undefined;
    totalTokens?: number | undefined;
    frontendAppVersion?: string | undefined;
}

export class ChatMessagesResponse implements IChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    messages?: ChatMessage[] | undefined;

    constructor(data?: IChatMessagesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ChatMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChatMessagesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessagesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    messages?: ChatMessage[] | undefined;
}

export class ClearChatMessagesRequest implements IClearChatMessagesRequest {
    loggedDateUtc?: Date | undefined;

    constructor(data?: IClearChatMessagesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ClearChatMessagesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ClearChatMessagesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IClearChatMessagesRequest {
    loggedDateUtc?: Date | undefined;
}

export class ClearChatMessagesResponse implements IClearChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    success?: boolean;
    messagesDeleted?: number;

    constructor(data?: IClearChatMessagesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.success = _data["success"];
            this.messagesDeleted = _data["messagesDeleted"];
        }
    }

    static fromJS(data: any): ClearChatMessagesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClearChatMessagesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["success"] = this.success;
        data["messagesDeleted"] = this.messagesDeleted;
        return data;
    }
}

export interface IClearChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    success?: boolean;
    messagesDeleted?: number;
}

export class CompleteFeedbackRequest implements ICompleteFeedbackRequest {
    feedbackId?: string | undefined;
    completionNote!: string;
    isCompleted?: boolean;

    constructor(data?: ICompleteFeedbackRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedbackId = _data["feedbackId"];
            this.completionNote = _data["completionNote"];
            this.isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): CompleteFeedbackRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteFeedbackRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedbackId"] = this.feedbackId;
        data["completionNote"] = this.completionNote;
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface ICompleteFeedbackRequest {
    feedbackId?: string | undefined;
    completionNote: string;
    isCompleted?: boolean;
}

export class CompleteFeedbackResponse implements ICompleteFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackEntry?: FeedbackEntry;

    constructor(data?: ICompleteFeedbackResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.feedbackEntry = _data["feedbackEntry"] ? FeedbackEntry.fromJS(_data["feedbackEntry"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CompleteFeedbackResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteFeedbackResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["feedbackEntry"] = this.feedbackEntry ? this.feedbackEntry.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICompleteFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackEntry?: FeedbackEntry;
}

export class ComponentMatch implements IComponentMatch {
    fatSecretFoodId?: string | undefined;
    displayName?: string | undefined;
    brandName?: string | undefined;
    originalText?: string | undefined;
    rank?: number;
    selectedServingId?: string | undefined;
    totalGrams?: number;
    servings?: ComponentServing[] | undefined;

    constructor(data?: IComponentMatch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fatSecretFoodId = _data["fatSecretFoodId"];
            this.displayName = _data["displayName"];
            this.brandName = _data["brandName"];
            this.originalText = _data["originalText"];
            this.rank = _data["rank"];
            this.selectedServingId = _data["selectedServingId"];
            this.totalGrams = _data["totalGrams"];
            if (Array.isArray(_data["servings"])) {
                this.servings = [] as any;
                for (let item of _data["servings"])
                    this.servings!.push(ComponentServing.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ComponentMatch {
        data = typeof data === 'object' ? data : {};
        let result = new ComponentMatch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fatSecretFoodId"] = this.fatSecretFoodId;
        data["displayName"] = this.displayName;
        data["brandName"] = this.brandName;
        data["originalText"] = this.originalText;
        data["rank"] = this.rank;
        data["selectedServingId"] = this.selectedServingId;
        data["totalGrams"] = this.totalGrams;
        if (Array.isArray(this.servings)) {
            data["servings"] = [];
            for (let item of this.servings)
                data["servings"].push(item.toJSON());
        }
        return data;
    }
}

export interface IComponentMatch {
    fatSecretFoodId?: string | undefined;
    displayName?: string | undefined;
    brandName?: string | undefined;
    originalText?: string | undefined;
    rank?: number;
    selectedServingId?: string | undefined;
    totalGrams?: number;
    servings?: ComponentServing[] | undefined;
}

export class ComponentServing implements IComponentServing {
    fatSecretServingId?: string | undefined;
    description?: string | undefined;
    displayQuantity?: number;
    displayUnit?: string | undefined;
    scaledQuantity?: number;
    scaledUnit?: string | undefined;
    weightGramsPerUnit?: number | undefined;
    nutrients?: { [key: string]: number; } | undefined;
    apiServingKind?: UnitKind;
    isBestMatch?: boolean;

    constructor(data?: IComponentServing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fatSecretServingId = _data["fatSecretServingId"];
            this.description = _data["description"];
            this.displayQuantity = _data["displayQuantity"];
            this.displayUnit = _data["displayUnit"];
            this.scaledQuantity = _data["scaledQuantity"];
            this.scaledUnit = _data["scaledUnit"];
            this.weightGramsPerUnit = _data["weightGramsPerUnit"];
            if (_data["nutrients"]) {
                this.nutrients = {} as any;
                for (let key in _data["nutrients"]) {
                    if (_data["nutrients"].hasOwnProperty(key))
                        (<any>this.nutrients)![key] = _data["nutrients"][key];
                }
            }
            this.apiServingKind = _data["apiServingKind"];
            this.isBestMatch = _data["isBestMatch"];
        }
    }

    static fromJS(data: any): ComponentServing {
        data = typeof data === 'object' ? data : {};
        let result = new ComponentServing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fatSecretServingId"] = this.fatSecretServingId;
        data["description"] = this.description;
        data["displayQuantity"] = this.displayQuantity;
        data["displayUnit"] = this.displayUnit;
        data["scaledQuantity"] = this.scaledQuantity;
        data["scaledUnit"] = this.scaledUnit;
        data["weightGramsPerUnit"] = this.weightGramsPerUnit;
        if (this.nutrients) {
            data["nutrients"] = {};
            for (let key in this.nutrients) {
                if (this.nutrients.hasOwnProperty(key))
                    (<any>data["nutrients"])[key] = (<any>this.nutrients)[key];
            }
        }
        data["apiServingKind"] = this.apiServingKind;
        data["isBestMatch"] = this.isBestMatch;
        return data;
    }
}

export interface IComponentServing {
    fatSecretServingId?: string | undefined;
    description?: string | undefined;
    displayQuantity?: number;
    displayUnit?: string | undefined;
    scaledQuantity?: number;
    scaledUnit?: string | undefined;
    weightGramsPerUnit?: number | undefined;
    nutrients?: { [key: string]: number; } | undefined;
    apiServingKind?: UnitKind;
    isBestMatch?: boolean;
}

export class DeleteFeedbackRequest implements IDeleteFeedbackRequest {
    feedbackId?: string | undefined;

    constructor(data?: IDeleteFeedbackRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedbackId = _data["feedbackId"];
        }
    }

    static fromJS(data: any): DeleteFeedbackRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFeedbackRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedbackId"] = this.feedbackId;
        return data;
    }
}

export interface IDeleteFeedbackRequest {
    feedbackId?: string | undefined;
}

export class DeleteFeedbackResponse implements IDeleteFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    deleted?: boolean;

    constructor(data?: IDeleteFeedbackResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.deleted = _data["deleted"];
        }
    }

    static fromJS(data: any): DeleteFeedbackResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFeedbackResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["deleted"] = this.deleted;
        return data;
    }
}

export interface IDeleteFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    deleted?: boolean;
}

export class DeleteFoodEntryRequest implements IDeleteFoodEntryRequest {
    foodItemIds?: string[] | undefined;

    constructor(data?: IDeleteFoodEntryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["foodItemIds"])) {
                this.foodItemIds = [] as any;
                for (let item of _data["foodItemIds"])
                    this.foodItemIds!.push(item);
            }
        }
    }

    static fromJS(data: any): DeleteFoodEntryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFoodEntryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.foodItemIds)) {
            data["foodItemIds"] = [];
            for (let item of this.foodItemIds)
                data["foodItemIds"].push(item);
        }
        return data;
    }
}

export interface IDeleteFoodEntryRequest {
    foodItemIds?: string[] | undefined;
}

export class DeleteFoodEntryResponse implements IDeleteFoodEntryResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;

    constructor(data?: IDeleteFoodEntryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
        }
    }

    static fromJS(data: any): DeleteFoodEntryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFoodEntryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        return data;
    }
}

export interface IDeleteFoodEntryResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
}

export class EditFoodSelectionRequest implements IEditFoodSelectionRequest {
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    loggedDateUtc?: Date | undefined;

    constructor(data?: IEditFoodSelectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.foodEntryId = _data["foodEntryId"];
            this.groupId = _data["groupId"];
            this.itemSetId = _data["itemSetId"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EditFoodSelectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditFoodSelectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["foodEntryId"] = this.foodEntryId;
        data["groupId"] = this.groupId;
        data["itemSetId"] = this.itemSetId;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IEditFoodSelectionRequest {
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    loggedDateUtc?: Date | undefined;
}

export class ErrorDto implements IErrorDto {
    errorMessage?: string | undefined;
    errorCode?: string | undefined;

    constructor(data?: IErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorMessage = _data["errorMessage"];
            this.errorCode = _data["errorCode"];
        }
    }

    static fromJS(data: any): ErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorMessage"] = this.errorMessage;
        data["errorCode"] = this.errorCode;
        return data;
    }
}

export interface IErrorDto {
    errorMessage?: string | undefined;
    errorCode?: string | undefined;
}

export class FeedbackEntry implements IFeedbackEntry {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    feedbackType?: string | undefined;
    message?: string | undefined;
    context?: string | undefined;
    appVersion?: string | undefined;
    isCompleted?: boolean;
    completedDateUtc?: Date | undefined;
    completionNote?: string | undefined;
    completedByAccountId?: string | undefined;
    isAssistantResponseShown?: boolean;
    assistantResponseShownDateUtc?: Date | undefined;

    constructor(data?: IFeedbackEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            this.lastUpdatedDateUtc = _data["lastUpdatedDateUtc"] ? new Date(_data["lastUpdatedDateUtc"].toString()) : <any>undefined;
            this.accountId = _data["accountId"];
            this.feedbackType = _data["feedbackType"];
            this.message = _data["message"];
            this.context = _data["context"];
            this.appVersion = _data["appVersion"];
            this.isCompleted = _data["isCompleted"];
            this.completedDateUtc = _data["completedDateUtc"] ? new Date(_data["completedDateUtc"].toString()) : <any>undefined;
            this.completionNote = _data["completionNote"];
            this.completedByAccountId = _data["completedByAccountId"];
            this.isAssistantResponseShown = _data["isAssistantResponseShown"];
            this.assistantResponseShownDateUtc = _data["assistantResponseShownDateUtc"] ? new Date(_data["assistantResponseShownDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FeedbackEntry {
        data = typeof data === 'object' ? data : {};
        let result = new FeedbackEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastUpdatedDateUtc"] = this.lastUpdatedDateUtc ? this.lastUpdatedDateUtc.toISOString() : <any>undefined;
        data["accountId"] = this.accountId;
        data["feedbackType"] = this.feedbackType;
        data["message"] = this.message;
        data["context"] = this.context;
        data["appVersion"] = this.appVersion;
        data["isCompleted"] = this.isCompleted;
        data["completedDateUtc"] = this.completedDateUtc ? this.completedDateUtc.toISOString() : <any>undefined;
        data["completionNote"] = this.completionNote;
        data["completedByAccountId"] = this.completedByAccountId;
        data["isAssistantResponseShown"] = this.isAssistantResponseShown;
        data["assistantResponseShownDateUtc"] = this.assistantResponseShownDateUtc ? this.assistantResponseShownDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IFeedbackEntry {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    feedbackType?: string | undefined;
    message?: string | undefined;
    context?: string | undefined;
    appVersion?: string | undefined;
    isCompleted?: boolean;
    completedDateUtc?: Date | undefined;
    completionNote?: string | undefined;
    completedByAccountId?: string | undefined;
    isAssistantResponseShown?: boolean;
    assistantResponseShownDateUtc?: Date | undefined;
}

export class FeedbackWithAccount implements IFeedbackWithAccount {
    feedback?: FeedbackEntry;
    accountEmail?: string | undefined;
    accountId?: string | undefined;
    accountCreatedDate?: Date | undefined;

    constructor(data?: IFeedbackWithAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedback = _data["feedback"] ? FeedbackEntry.fromJS(_data["feedback"]) : <any>undefined;
            this.accountEmail = _data["accountEmail"];
            this.accountId = _data["accountId"];
            this.accountCreatedDate = _data["accountCreatedDate"] ? new Date(_data["accountCreatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FeedbackWithAccount {
        data = typeof data === 'object' ? data : {};
        let result = new FeedbackWithAccount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedback"] = this.feedback ? this.feedback.toJSON() : <any>undefined;
        data["accountEmail"] = this.accountEmail;
        data["accountId"] = this.accountId;
        data["accountCreatedDate"] = this.accountCreatedDate ? this.accountCreatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IFeedbackWithAccount {
    feedback?: FeedbackEntry;
    accountEmail?: string | undefined;
    accountId?: string | undefined;
    accountCreatedDate?: Date | undefined;
}

export class FoodBreakdown implements IFoodBreakdown {
    foodItemIds?: string[] | undefined;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    totalAmount?: number;
    unit?: string | undefined;
    nutrients?: NutrientContribution[] | undefined;

    constructor(data?: IFoodBreakdown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["foodItemIds"])) {
                this.foodItemIds = [] as any;
                for (let item of _data["foodItemIds"])
                    this.foodItemIds!.push(item);
            }
            this.foodEntryId = _data["foodEntryId"];
            this.groupId = _data["groupId"];
            this.itemSetId = _data["itemSetId"];
            this.name = _data["name"];
            this.brandName = _data["brandName"];
            this.totalAmount = _data["totalAmount"];
            this.unit = _data["unit"];
            if (Array.isArray(_data["nutrients"])) {
                this.nutrients = [] as any;
                for (let item of _data["nutrients"])
                    this.nutrients!.push(NutrientContribution.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FoodBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new FoodBreakdown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.foodItemIds)) {
            data["foodItemIds"] = [];
            for (let item of this.foodItemIds)
                data["foodItemIds"].push(item);
        }
        data["foodEntryId"] = this.foodEntryId;
        data["groupId"] = this.groupId;
        data["itemSetId"] = this.itemSetId;
        data["name"] = this.name;
        data["brandName"] = this.brandName;
        data["totalAmount"] = this.totalAmount;
        data["unit"] = this.unit;
        if (Array.isArray(this.nutrients)) {
            data["nutrients"] = [];
            for (let item of this.nutrients)
                data["nutrients"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFoodBreakdown {
    foodItemIds?: string[] | undefined;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    totalAmount?: number;
    unit?: string | undefined;
    nutrients?: NutrientContribution[] | undefined;
}

export class FoodContribution implements IFoodContribution {
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    foodUnit?: string | undefined;
    displayQuantity?: number;
    foodEntryId?: string | undefined;
    foodId?: string | undefined;
    componentId?: string | undefined;

    constructor(data?: IFoodContribution) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.brandName = _data["brandName"];
            this.amount = _data["amount"];
            this.unit = _data["unit"];
            this.foodUnit = _data["foodUnit"];
            this.displayQuantity = _data["displayQuantity"];
            this.foodEntryId = _data["foodEntryId"];
            this.foodId = _data["foodId"];
            this.componentId = _data["componentId"];
        }
    }

    static fromJS(data: any): FoodContribution {
        data = typeof data === 'object' ? data : {};
        let result = new FoodContribution();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["brandName"] = this.brandName;
        data["amount"] = this.amount;
        data["unit"] = this.unit;
        data["foodUnit"] = this.foodUnit;
        data["displayQuantity"] = this.displayQuantity;
        data["foodEntryId"] = this.foodEntryId;
        data["foodId"] = this.foodId;
        data["componentId"] = this.componentId;
        return data;
    }
}

export interface IFoodContribution {
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    foodUnit?: string | undefined;
    displayQuantity?: number;
    foodEntryId?: string | undefined;
    foodId?: string | undefined;
    componentId?: string | undefined;
}

export class FoodEntryBreakdown implements IFoodEntryBreakdown {
    foodEntryId?: string | undefined;
    entryName?: string | undefined;
    loggedDateUtc?: Date;
    createdDateUtc?: Date;
    foods?: FoodBreakdown[] | undefined;

    constructor(data?: IFoodEntryBreakdown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.foodEntryId = _data["foodEntryId"];
            this.entryName = _data["entryName"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["foods"])) {
                this.foods = [] as any;
                for (let item of _data["foods"])
                    this.foods!.push(FoodBreakdown.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FoodEntryBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new FoodEntryBreakdown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["foodEntryId"] = this.foodEntryId;
        data["entryName"] = this.entryName;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.foods)) {
            data["foods"] = [];
            for (let item of this.foods)
                data["foods"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFoodEntryBreakdown {
    foodEntryId?: string | undefined;
    entryName?: string | undefined;
    loggedDateUtc?: Date;
    createdDateUtc?: Date;
    foods?: FoodBreakdown[] | undefined;
}

export class GetChatMessagesRequest implements IGetChatMessagesRequest {
    loggedDateUtc!: Date;

    constructor(data?: IGetChatMessagesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetChatMessagesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetChatMessagesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetChatMessagesRequest {
    loggedDateUtc: Date;
}

export class GetDetailedSummaryRequest implements IGetDetailedSummaryRequest {
    loggedDateUtc?: Date;

    constructor(data?: IGetDetailedSummaryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetDetailedSummaryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetDetailedSummaryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetDetailedSummaryRequest {
    loggedDateUtc?: Date;
}

export class GetDetailedSummaryResponse implements IGetDetailedSummaryResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    nutrients?: NutrientBreakdown[] | undefined;
    foods?: FoodBreakdown[] | undefined;
    foodEntries?: FoodEntryBreakdown[] | undefined;

    constructor(data?: IGetDetailedSummaryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["nutrients"])) {
                this.nutrients = [] as any;
                for (let item of _data["nutrients"])
                    this.nutrients!.push(NutrientBreakdown.fromJS(item));
            }
            if (Array.isArray(_data["foods"])) {
                this.foods = [] as any;
                for (let item of _data["foods"])
                    this.foods!.push(FoodBreakdown.fromJS(item));
            }
            if (Array.isArray(_data["foodEntries"])) {
                this.foodEntries = [] as any;
                for (let item of _data["foodEntries"])
                    this.foodEntries!.push(FoodEntryBreakdown.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDetailedSummaryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDetailedSummaryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.nutrients)) {
            data["nutrients"] = [];
            for (let item of this.nutrients)
                data["nutrients"].push(item.toJSON());
        }
        if (Array.isArray(this.foods)) {
            data["foods"] = [];
            for (let item of this.foods)
                data["foods"].push(item.toJSON());
        }
        if (Array.isArray(this.foodEntries)) {
            data["foodEntries"] = [];
            for (let item of this.foodEntries)
                data["foodEntries"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetDetailedSummaryResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    nutrients?: NutrientBreakdown[] | undefined;
    foods?: FoodBreakdown[] | undefined;
    foodEntries?: FoodEntryBreakdown[] | undefined;
}

export class GetFeedbackRequest implements IGetFeedbackRequest {
    feedbackId?: string | undefined;
    feedbackType?: string | undefined;
    includeAllAccounts?: boolean;
    isCompleted?: boolean | undefined;
    completedOnly?: boolean;
    incompleteOnly?: boolean;

    constructor(data?: IGetFeedbackRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedbackId = _data["feedbackId"];
            this.feedbackType = _data["feedbackType"];
            this.includeAllAccounts = _data["includeAllAccounts"];
            this.isCompleted = _data["isCompleted"];
            this.completedOnly = _data["completedOnly"];
            this.incompleteOnly = _data["incompleteOnly"];
        }
    }

    static fromJS(data: any): GetFeedbackRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetFeedbackRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedbackId"] = this.feedbackId;
        data["feedbackType"] = this.feedbackType;
        data["includeAllAccounts"] = this.includeAllAccounts;
        data["isCompleted"] = this.isCompleted;
        data["completedOnly"] = this.completedOnly;
        data["incompleteOnly"] = this.incompleteOnly;
        return data;
    }
}

export interface IGetFeedbackRequest {
    feedbackId?: string | undefined;
    feedbackType?: string | undefined;
    includeAllAccounts?: boolean;
    isCompleted?: boolean | undefined;
    completedOnly?: boolean;
    incompleteOnly?: boolean;
}

export class GetFeedbackResponse implements IGetFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackEntries?: FeedbackEntry[] | undefined;
    feedbackEntry?: FeedbackEntry;
    feedbackWithAccounts?: FeedbackWithAccount[] | undefined;

    constructor(data?: IGetFeedbackResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["feedbackEntries"])) {
                this.feedbackEntries = [] as any;
                for (let item of _data["feedbackEntries"])
                    this.feedbackEntries!.push(FeedbackEntry.fromJS(item));
            }
            this.feedbackEntry = _data["feedbackEntry"] ? FeedbackEntry.fromJS(_data["feedbackEntry"]) : <any>undefined;
            if (Array.isArray(_data["feedbackWithAccounts"])) {
                this.feedbackWithAccounts = [] as any;
                for (let item of _data["feedbackWithAccounts"])
                    this.feedbackWithAccounts!.push(FeedbackWithAccount.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFeedbackResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetFeedbackResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.feedbackEntries)) {
            data["feedbackEntries"] = [];
            for (let item of this.feedbackEntries)
                data["feedbackEntries"].push(item.toJSON());
        }
        data["feedbackEntry"] = this.feedbackEntry ? this.feedbackEntry.toJSON() : <any>undefined;
        if (Array.isArray(this.feedbackWithAccounts)) {
            data["feedbackWithAccounts"] = [];
            for (let item of this.feedbackWithAccounts)
                data["feedbackWithAccounts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackEntries?: FeedbackEntry[] | undefined;
    feedbackEntry?: FeedbackEntry;
    feedbackWithAccounts?: FeedbackWithAccount[] | undefined;
}

export class GetFeedbackWithAccountInfoRequest implements IGetFeedbackWithAccountInfoRequest {
    feedbackType?: string | undefined;
    accountId?: string | undefined;
    completedOnly?: boolean;
    incompleteOnly?: boolean;
    accountEmail?: string | undefined;

    constructor(data?: IGetFeedbackWithAccountInfoRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedbackType = _data["feedbackType"];
            this.accountId = _data["accountId"];
            this.completedOnly = _data["completedOnly"];
            this.incompleteOnly = _data["incompleteOnly"];
            this.accountEmail = _data["accountEmail"];
        }
    }

    static fromJS(data: any): GetFeedbackWithAccountInfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetFeedbackWithAccountInfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedbackType"] = this.feedbackType;
        data["accountId"] = this.accountId;
        data["completedOnly"] = this.completedOnly;
        data["incompleteOnly"] = this.incompleteOnly;
        data["accountEmail"] = this.accountEmail;
        return data;
    }
}

export interface IGetFeedbackWithAccountInfoRequest {
    feedbackType?: string | undefined;
    accountId?: string | undefined;
    completedOnly?: boolean;
    incompleteOnly?: boolean;
    accountEmail?: string | undefined;
}

export class GetFeedbackWithAccountInfoResponse implements IGetFeedbackWithAccountInfoResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackWithAccounts?: FeedbackWithAccount[] | undefined;

    constructor(data?: IGetFeedbackWithAccountInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["feedbackWithAccounts"])) {
                this.feedbackWithAccounts = [] as any;
                for (let item of _data["feedbackWithAccounts"])
                    this.feedbackWithAccounts!.push(FeedbackWithAccount.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFeedbackWithAccountInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetFeedbackWithAccountInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.feedbackWithAccounts)) {
            data["feedbackWithAccounts"] = [];
            for (let item of this.feedbackWithAccounts)
                data["feedbackWithAccounts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFeedbackWithAccountInfoResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackWithAccounts?: FeedbackWithAccount[] | undefined;
}

export class GetUserChatMessagesRequest implements IGetUserChatMessagesRequest {
    accountId?: string | undefined;
    loggedDateUtc?: Date | undefined;
    limit?: number | undefined;

    constructor(data?: IGetUserChatMessagesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
            this.limit = _data["limit"];
        }
    }

    static fromJS(data: any): GetUserChatMessagesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserChatMessagesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        data["limit"] = this.limit;
        return data;
    }
}

export interface IGetUserChatMessagesRequest {
    accountId?: string | undefined;
    loggedDateUtc?: Date | undefined;
    limit?: number | undefined;
}

export class GetUserChatMessagesResponse implements IGetUserChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    messages?: ChatMessage[] | undefined;
    accountId?: string | undefined;
    accountEmail?: string | undefined;

    constructor(data?: IGetUserChatMessagesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ChatMessage.fromJS(item));
            }
            this.accountId = _data["accountId"];
            this.accountEmail = _data["accountEmail"];
        }
    }

    static fromJS(data: any): GetUserChatMessagesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserChatMessagesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        data["accountId"] = this.accountId;
        data["accountEmail"] = this.accountEmail;
        return data;
    }
}

export interface IGetUserChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    messages?: ChatMessage[] | undefined;
    accountId?: string | undefined;
    accountEmail?: string | undefined;
}

export class LearnMoreAboutRequest implements ILearnMoreAboutRequest {
    topic?: string | undefined;
    loggedDateUtc?: Date | undefined;

    constructor(data?: ILearnMoreAboutRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.topic = _data["topic"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LearnMoreAboutRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LearnMoreAboutRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["topic"] = this.topic;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface ILearnMoreAboutRequest {
    topic?: string | undefined;
    loggedDateUtc?: Date | undefined;
}

export class LogMealToolResponse implements ILogMealToolResponse {
    mealName?: string | undefined;
    pendingMessageId?: string | undefined;
    componentMatches?: { [key: string]: ComponentMatch[]; } | undefined;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;

    constructor(data?: ILogMealToolResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mealName = _data["mealName"];
            this.pendingMessageId = _data["pendingMessageId"];
            if (_data["componentMatches"]) {
                this.componentMatches = {} as any;
                for (let key in _data["componentMatches"]) {
                    if (_data["componentMatches"].hasOwnProperty(key))
                        (<any>this.componentMatches)![key] = _data["componentMatches"][key] ? _data["componentMatches"][key].map((i: any) => ComponentMatch.fromJS(i)) : <any>undefined;
                }
            }
            this.foodEntryId = _data["foodEntryId"];
            this.groupId = _data["groupId"];
            this.itemSetId = _data["itemSetId"];
        }
    }

    static fromJS(data: any): LogMealToolResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LogMealToolResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mealName"] = this.mealName;
        data["pendingMessageId"] = this.pendingMessageId;
        if (this.componentMatches) {
            data["componentMatches"] = {};
            for (let key in this.componentMatches) {
                if (this.componentMatches.hasOwnProperty(key))
                    (<any>data["componentMatches"])[key] = (<any>this.componentMatches)[key];
            }
        }
        data["foodEntryId"] = this.foodEntryId;
        data["groupId"] = this.groupId;
        data["itemSetId"] = this.itemSetId;
        return data;
    }
}

export interface ILogMealToolResponse {
    mealName?: string | undefined;
    pendingMessageId?: string | undefined;
    componentMatches?: { [key: string]: ComponentMatch[]; } | undefined;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
}

export enum MessageRoleTypes {
    User = "User",
    Assistant = "Assistant",
    Tool = "Tool",
    System = "System",
    ContextNote = "ContextNote",
    PendingFoodSelection = "PendingFoodSelection",
    CompletedFoodSelection = "CompletedFoodSelection",
    CanceledFoodSelection = "CanceledFoodSelection",
    PendingEditFoodSelection = "PendingEditFoodSelection",
    CompletedEditFoodSelection = "CompletedEditFoodSelection",
}

export class NutrientBreakdown implements INutrientBreakdown {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    unit?: string | undefined;
    totalAmount?: number;
    minTarget?: number | undefined;
    maxTarget?: number | undefined;
    sortOrder?: number;
    readonly percentOfTarget?: number | undefined;
    foods?: FoodContribution[] | undefined;

    constructor(data?: INutrientBreakdown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nutrientKey = _data["nutrientKey"];
            this.nutrientName = _data["nutrientName"];
            this.unit = _data["unit"];
            this.totalAmount = _data["totalAmount"];
            this.minTarget = _data["minTarget"];
            this.maxTarget = _data["maxTarget"];
            this.sortOrder = _data["sortOrder"];
            (<any>this).percentOfTarget = _data["percentOfTarget"];
            if (Array.isArray(_data["foods"])) {
                this.foods = [] as any;
                for (let item of _data["foods"])
                    this.foods!.push(FoodContribution.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NutrientBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new NutrientBreakdown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nutrientKey"] = this.nutrientKey;
        data["nutrientName"] = this.nutrientName;
        data["unit"] = this.unit;
        data["totalAmount"] = this.totalAmount;
        data["minTarget"] = this.minTarget;
        data["maxTarget"] = this.maxTarget;
        data["sortOrder"] = this.sortOrder;
        data["percentOfTarget"] = this.percentOfTarget;
        if (Array.isArray(this.foods)) {
            data["foods"] = [];
            for (let item of this.foods)
                data["foods"].push(item.toJSON());
        }
        return data;
    }
}

export interface INutrientBreakdown {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    unit?: string | undefined;
    totalAmount?: number;
    minTarget?: number | undefined;
    maxTarget?: number | undefined;
    sortOrder?: number;
    percentOfTarget?: number | undefined;
    foods?: FoodContribution[] | undefined;
}

export class NutrientContribution implements INutrientContribution {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    originalUnit?: string | undefined;

    constructor(data?: INutrientContribution) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nutrientKey = _data["nutrientKey"];
            this.nutrientName = _data["nutrientName"];
            this.name = _data["name"];
            this.brandName = _data["brandName"];
            this.amount = _data["amount"];
            this.unit = _data["unit"];
            this.originalUnit = _data["originalUnit"];
        }
    }

    static fromJS(data: any): NutrientContribution {
        data = typeof data === 'object' ? data : {};
        let result = new NutrientContribution();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nutrientKey"] = this.nutrientKey;
        data["nutrientName"] = this.nutrientName;
        data["name"] = this.name;
        data["brandName"] = this.brandName;
        data["amount"] = this.amount;
        data["unit"] = this.unit;
        data["originalUnit"] = this.originalUnit;
        return data;
    }
}

export interface INutrientContribution {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    originalUnit?: string | undefined;
}

export class Request implements IRequest {

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IRequest {
}

export class Response implements IResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;

    constructor(data?: IResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
        }
    }

    static fromJS(data: any): Response {
        data = typeof data === 'object' ? data : {};
        let result = new Response();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        return data;
    }
}

export interface IResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
}

export class RunChatRequest implements IRunChatRequest {
    message?: string | undefined;
    loggedDateUtc?: Date | undefined;
    frontendAppVersion?: string | undefined;

    constructor(data?: IRunChatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
            this.frontendAppVersion = _data["frontendAppVersion"];
        }
    }

    static fromJS(data: any): RunChatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RunChatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        data["frontendAppVersion"] = this.frontendAppVersion;
        return data;
    }
}

export interface IRunChatRequest {
    message?: string | undefined;
    loggedDateUtc?: Date | undefined;
    frontendAppVersion?: string | undefined;
}

export class SubmitEditServingSelectionRequest implements ISubmitEditServingSelectionRequest {
    pendingMessageId?: string | undefined;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    loggedDateUtc?: Date;
    selections?: UserSelectedServing[] | undefined;

    constructor(data?: ISubmitEditServingSelectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pendingMessageId = _data["pendingMessageId"];
            this.foodEntryId = _data["foodEntryId"];
            this.groupId = _data["groupId"];
            this.itemSetId = _data["itemSetId"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["selections"])) {
                this.selections = [] as any;
                for (let item of _data["selections"])
                    this.selections!.push(UserSelectedServing.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubmitEditServingSelectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitEditServingSelectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pendingMessageId"] = this.pendingMessageId;
        data["foodEntryId"] = this.foodEntryId;
        data["groupId"] = this.groupId;
        data["itemSetId"] = this.itemSetId;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.selections)) {
            data["selections"] = [];
            for (let item of this.selections)
                data["selections"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISubmitEditServingSelectionRequest {
    pendingMessageId?: string | undefined;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    loggedDateUtc?: Date;
    selections?: UserSelectedServing[] | undefined;
}

export class SubmitServingSelectionRequest implements ISubmitServingSelectionRequest {
    loggedDateUtc?: Date;
    pendingMessageId?: string | undefined;
    selections?: UserSelectedServing[] | undefined;

    constructor(data?: ISubmitServingSelectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
            this.pendingMessageId = _data["pendingMessageId"];
            if (Array.isArray(_data["selections"])) {
                this.selections = [] as any;
                for (let item of _data["selections"])
                    this.selections!.push(UserSelectedServing.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubmitServingSelectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitServingSelectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        data["pendingMessageId"] = this.pendingMessageId;
        if (Array.isArray(this.selections)) {
            data["selections"] = [];
            for (let item of this.selections)
                data["selections"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISubmitServingSelectionRequest {
    loggedDateUtc?: Date;
    pendingMessageId?: string | undefined;
    selections?: UserSelectedServing[] | undefined;
}

export class SubmitUserFeedbackRequest implements ISubmitUserFeedbackRequest {
    feedbackType?: string | undefined;
    message?: string | undefined;
    context?: string | undefined;
    appVersion?: string | undefined;

    constructor(data?: ISubmitUserFeedbackRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedbackType = _data["feedbackType"];
            this.message = _data["message"];
            this.context = _data["context"];
            this.appVersion = _data["appVersion"];
        }
    }

    static fromJS(data: any): SubmitUserFeedbackRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitUserFeedbackRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedbackType"] = this.feedbackType;
        data["message"] = this.message;
        data["context"] = this.context;
        data["appVersion"] = this.appVersion;
        return data;
    }
}

export interface ISubmitUserFeedbackRequest {
    feedbackType?: string | undefined;
    message?: string | undefined;
    context?: string | undefined;
    appVersion?: string | undefined;
}

export class SubmitUserFeedbackResponse implements ISubmitUserFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackEntry?: FeedbackEntry;

    constructor(data?: ISubmitUserFeedbackResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.feedbackEntry = _data["feedbackEntry"] ? FeedbackEntry.fromJS(_data["feedbackEntry"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SubmitUserFeedbackResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitUserFeedbackResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["feedbackEntry"] = this.feedbackEntry ? this.feedbackEntry.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISubmitUserFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackEntry?: FeedbackEntry;
}

export enum UnitKind {
    Weight = "Weight",
    Volume = "Volume",
    Count = "Count",
}

export class UpdateFeedbackRequest implements IUpdateFeedbackRequest {
    feedbackId?: string | undefined;
    feedbackType?: string | undefined;
    message?: string | undefined;
    context?: string | undefined;

    constructor(data?: IUpdateFeedbackRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedbackId = _data["feedbackId"];
            this.feedbackType = _data["feedbackType"];
            this.message = _data["message"];
            this.context = _data["context"];
        }
    }

    static fromJS(data: any): UpdateFeedbackRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFeedbackRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedbackId"] = this.feedbackId;
        data["feedbackType"] = this.feedbackType;
        data["message"] = this.message;
        data["context"] = this.context;
        return data;
    }
}

export interface IUpdateFeedbackRequest {
    feedbackId?: string | undefined;
    feedbackType?: string | undefined;
    message?: string | undefined;
    context?: string | undefined;
}

export class UpdateFeedbackResponse implements IUpdateFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackEntry?: FeedbackEntry;

    constructor(data?: IUpdateFeedbackResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.feedbackEntry = _data["feedbackEntry"] ? FeedbackEntry.fromJS(_data["feedbackEntry"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateFeedbackResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFeedbackResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["feedbackEntry"] = this.feedbackEntry ? this.feedbackEntry.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackEntry?: FeedbackEntry;
}

export class UserSelectedServing implements IUserSelectedServing {
    originalText?: string | undefined;
    fatSecretFoodId?: string | undefined;
    fatSecretServingId?: string | undefined;
    editedQuantity?: number | undefined;

    constructor(data?: IUserSelectedServing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.originalText = _data["originalText"];
            this.fatSecretFoodId = _data["fatSecretFoodId"];
            this.fatSecretServingId = _data["fatSecretServingId"];
            this.editedQuantity = _data["editedQuantity"];
        }
    }

    static fromJS(data: any): UserSelectedServing {
        data = typeof data === 'object' ? data : {};
        let result = new UserSelectedServing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalText"] = this.originalText;
        data["fatSecretFoodId"] = this.fatSecretFoodId;
        data["fatSecretServingId"] = this.fatSecretServingId;
        data["editedQuantity"] = this.editedQuantity;
        return data;
    }
}

export interface IUserSelectedServing {
    originalText?: string | undefined;
    fatSecretFoodId?: string | undefined;
    fatSecretServingId?: string | undefined;
    editedQuantity?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}