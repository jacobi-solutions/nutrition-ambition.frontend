//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface INutritionAmbitionApiService {
    /**
     * @param body (optional) 
     * @return Success
     */
    getChatMessages(body: GetChatMessagesRequest | undefined): Observable<GetChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    clearChatMessages(body: ClearChatMessagesRequest | undefined): Observable<ClearChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    runResponsesConversation(body: RunChatRequest | undefined): Observable<BotMessageResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    focusInChat(body: FocusInChatRequest | undefined): Observable<BotMessageResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    learnMoreAbout(body: LearnMoreAboutRequest | undefined): Observable<BotMessageResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getDetailedSummary(body: GetDetailedSummaryRequest | undefined): Observable<GetDetailedSummaryResponse>;
}

@Injectable()
export class NutritionAmbitionApiService implements INutritionAmbitionApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getChatMessages(body: GetChatMessagesRequest | undefined): Observable<GetChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Conversation/GetChatMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetChatMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetChatMessages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetChatMessagesResponse>;
        }));
    }

    protected processGetChatMessages(response: HttpResponseBase): Observable<GetChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    clearChatMessages(body: ClearChatMessagesRequest | undefined): Observable<ClearChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Conversation/ClearChatMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClearChatMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearChatMessages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClearChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClearChatMessagesResponse>;
        }));
    }

    protected processClearChatMessages(response: HttpResponseBase): Observable<ClearChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClearChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClearChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    runResponsesConversation(body: RunChatRequest | undefined): Observable<BotMessageResponse> {
        let url_ = this.baseUrl + "/api/Conversation/RunResponsesConversation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRunResponsesConversation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRunResponsesConversation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BotMessageResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BotMessageResponse>;
        }));
    }

    protected processRunResponsesConversation(response: HttpResponseBase): Observable<BotMessageResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BotMessageResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BotMessageResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    focusInChat(body: FocusInChatRequest | undefined): Observable<BotMessageResponse> {
        let url_ = this.baseUrl + "/api/Conversation/FocusInChat";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFocusInChat(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFocusInChat(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BotMessageResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BotMessageResponse>;
        }));
    }

    protected processFocusInChat(response: HttpResponseBase): Observable<BotMessageResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BotMessageResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BotMessageResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    learnMoreAbout(body: LearnMoreAboutRequest | undefined): Observable<BotMessageResponse> {
        let url_ = this.baseUrl + "/api/Conversation/LearnMoreAbout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLearnMoreAbout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLearnMoreAbout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BotMessageResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BotMessageResponse>;
        }));
    }

    protected processLearnMoreAbout(response: HttpResponseBase): Observable<BotMessageResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BotMessageResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BotMessageResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getDetailedSummary(body: GetDetailedSummaryRequest | undefined): Observable<GetDetailedSummaryResponse> {
        let url_ = this.baseUrl + "/api/DetailedSummary/GetDetailedSummary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetailedSummary(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetailedSummary(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetDetailedSummaryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetDetailedSummaryResponse>;
        }));
    }

    protected processGetDetailedSummary(response: HttpResponseBase): Observable<GetDetailedSummaryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDetailedSummaryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetDetailedSummaryResponse>(null as any);
    }
}

export enum AssistantMode {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class BotMessageResponse implements IBotMessageResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    message?: string | undefined;
    accountId?: string | undefined;
    toolCalls?: ToolCall[] | undefined;
    responseId?: string | undefined;
    loggedMeal?: boolean;
    assistantMode?: AssistantMode;
    goalPhase?: string | undefined;

    constructor(data?: IBotMessageResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.message = _data["message"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["toolCalls"])) {
                this.toolCalls = [] as any;
                for (let item of _data["toolCalls"])
                    this.toolCalls!.push(ToolCall.fromJS(item));
            }
            this.responseId = _data["responseId"];
            this.loggedMeal = _data["loggedMeal"];
            this.assistantMode = _data["assistantMode"];
            this.goalPhase = _data["goalPhase"];
        }
    }

    static fromJS(data: any): BotMessageResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BotMessageResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["message"] = this.message;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.toolCalls)) {
            data["toolCalls"] = [];
            for (let item of this.toolCalls)
                data["toolCalls"].push(item.toJSON());
        }
        data["responseId"] = this.responseId;
        data["loggedMeal"] = this.loggedMeal;
        data["assistantMode"] = this.assistantMode;
        data["goalPhase"] = this.goalPhase;
        return data;
    }
}

export interface IBotMessageResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    message?: string | undefined;
    accountId?: string | undefined;
    toolCalls?: ToolCall[] | undefined;
    responseId?: string | undefined;
    loggedMeal?: boolean;
    assistantMode?: AssistantMode;
    goalPhase?: string | undefined;
}

export class ChatMessage implements IChatMessage {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    role?: MessageRoleTypes;
    content?: string | undefined;
    loggedDateUtc?: Date;
    foodEntryId?: string | undefined;
    isRead?: boolean;
    responseId?: string | undefined;
    assistantMode?: AssistantMode;
    goalPhase?: string | undefined;

    constructor(data?: IChatMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            this.lastUpdatedDateUtc = _data["lastUpdatedDateUtc"] ? new Date(_data["lastUpdatedDateUtc"].toString()) : <any>undefined;
            this.accountId = _data["accountId"];
            this.role = _data["role"];
            this.content = _data["content"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
            this.foodEntryId = _data["foodEntryId"];
            this.isRead = _data["isRead"];
            this.responseId = _data["responseId"];
            this.assistantMode = _data["assistantMode"];
            this.goalPhase = _data["goalPhase"];
        }
    }

    static fromJS(data: any): ChatMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastUpdatedDateUtc"] = this.lastUpdatedDateUtc ? this.lastUpdatedDateUtc.toISOString() : <any>undefined;
        data["accountId"] = this.accountId;
        data["role"] = this.role;
        data["content"] = this.content;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        data["foodEntryId"] = this.foodEntryId;
        data["isRead"] = this.isRead;
        data["responseId"] = this.responseId;
        data["assistantMode"] = this.assistantMode;
        data["goalPhase"] = this.goalPhase;
        return data;
    }
}

export interface IChatMessage {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    role?: MessageRoleTypes;
    content?: string | undefined;
    loggedDateUtc?: Date;
    foodEntryId?: string | undefined;
    isRead?: boolean;
    responseId?: string | undefined;
    assistantMode?: AssistantMode;
    goalPhase?: string | undefined;
}

export class ClearChatMessagesRequest implements IClearChatMessagesRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    loggedDateUtc?: Date | undefined;

    constructor(data?: IClearChatMessagesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.isAnonymousUser = _data["isAnonymousUser"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ClearChatMessagesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ClearChatMessagesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["isAnonymousUser"] = this.isAnonymousUser;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IClearChatMessagesRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    loggedDateUtc?: Date | undefined;
}

export class ClearChatMessagesResponse implements IClearChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    success?: boolean;
    messagesDeleted?: number;

    constructor(data?: IClearChatMessagesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.success = _data["success"];
            this.messagesDeleted = _data["messagesDeleted"];
        }
    }

    static fromJS(data: any): ClearChatMessagesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClearChatMessagesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["success"] = this.success;
        data["messagesDeleted"] = this.messagesDeleted;
        return data;
    }
}

export interface IClearChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    success?: boolean;
    messagesDeleted?: number;
}

export class DailyTarget implements IDailyTarget {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    effectiveDateUtc?: Date;
    baseCalories?: number;
    nutrientTargets?: NutrientTarget[] | undefined;

    constructor(data?: IDailyTarget) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            this.lastUpdatedDateUtc = _data["lastUpdatedDateUtc"] ? new Date(_data["lastUpdatedDateUtc"].toString()) : <any>undefined;
            this.accountId = _data["accountId"];
            this.effectiveDateUtc = _data["effectiveDateUtc"] ? new Date(_data["effectiveDateUtc"].toString()) : <any>undefined;
            this.baseCalories = _data["baseCalories"];
            if (Array.isArray(_data["nutrientTargets"])) {
                this.nutrientTargets = [] as any;
                for (let item of _data["nutrientTargets"])
                    this.nutrientTargets!.push(NutrientTarget.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DailyTarget {
        data = typeof data === 'object' ? data : {};
        let result = new DailyTarget();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastUpdatedDateUtc"] = this.lastUpdatedDateUtc ? this.lastUpdatedDateUtc.toISOString() : <any>undefined;
        data["accountId"] = this.accountId;
        data["effectiveDateUtc"] = this.effectiveDateUtc ? this.effectiveDateUtc.toISOString() : <any>undefined;
        data["baseCalories"] = this.baseCalories;
        if (Array.isArray(this.nutrientTargets)) {
            data["nutrientTargets"] = [];
            for (let item of this.nutrientTargets)
                data["nutrientTargets"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDailyTarget {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    effectiveDateUtc?: Date;
    baseCalories?: number;
    nutrientTargets?: NutrientTarget[] | undefined;
}

export class ErrorDto implements IErrorDto {
    errorMessage?: string | undefined;
    errorCode?: string | undefined;

    constructor(data?: IErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorMessage = _data["errorMessage"];
            this.errorCode = _data["errorCode"];
        }
    }

    static fromJS(data: any): ErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorMessage"] = this.errorMessage;
        data["errorCode"] = this.errorCode;
        return data;
    }
}

export interface IErrorDto {
    errorMessage?: string | undefined;
    errorCode?: string | undefined;
}

export class FocusInChatRequest implements IFocusInChatRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    focusText?: string | undefined;
    date?: Date | undefined;

    constructor(data?: IFocusInChatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.isAnonymousUser = _data["isAnonymousUser"];
            this.focusText = _data["focusText"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FocusInChatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new FocusInChatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["isAnonymousUser"] = this.isAnonymousUser;
        data["focusText"] = this.focusText;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

export interface IFocusInChatRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    focusText?: string | undefined;
    date?: Date | undefined;
}

export class FoodBreakdown implements IFoodBreakdown {
    foodItemIds?: string[] | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    totalAmount?: number;
    unit?: string | undefined;
    nutrients?: NutrientContribution[] | undefined;

    constructor(data?: IFoodBreakdown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["foodItemIds"])) {
                this.foodItemIds = [] as any;
                for (let item of _data["foodItemIds"])
                    this.foodItemIds!.push(item);
            }
            this.name = _data["name"];
            this.brandName = _data["brandName"];
            this.totalAmount = _data["totalAmount"];
            this.unit = _data["unit"];
            if (Array.isArray(_data["nutrients"])) {
                this.nutrients = [] as any;
                for (let item of _data["nutrients"])
                    this.nutrients!.push(NutrientContribution.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FoodBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new FoodBreakdown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.foodItemIds)) {
            data["foodItemIds"] = [];
            for (let item of this.foodItemIds)
                data["foodItemIds"].push(item);
        }
        data["name"] = this.name;
        data["brandName"] = this.brandName;
        data["totalAmount"] = this.totalAmount;
        data["unit"] = this.unit;
        if (Array.isArray(this.nutrients)) {
            data["nutrients"] = [];
            for (let item of this.nutrients)
                data["nutrients"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFoodBreakdown {
    foodItemIds?: string[] | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    totalAmount?: number;
    unit?: string | undefined;
    nutrients?: NutrientContribution[] | undefined;
}

export class FoodContribution implements IFoodContribution {
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    foodUnit?: string | undefined;
    displayQuantity?: number;

    constructor(data?: IFoodContribution) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.brandName = _data["brandName"];
            this.amount = _data["amount"];
            this.unit = _data["unit"];
            this.foodUnit = _data["foodUnit"];
            this.displayQuantity = _data["displayQuantity"];
        }
    }

    static fromJS(data: any): FoodContribution {
        data = typeof data === 'object' ? data : {};
        let result = new FoodContribution();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["brandName"] = this.brandName;
        data["amount"] = this.amount;
        data["unit"] = this.unit;
        data["foodUnit"] = this.foodUnit;
        data["displayQuantity"] = this.displayQuantity;
        return data;
    }
}

export interface IFoodContribution {
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    foodUnit?: string | undefined;
    displayQuantity?: number;
}

export class GetChatMessagesRequest implements IGetChatMessagesRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    loggedDateUtc!: Date;

    constructor(data?: IGetChatMessagesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.isAnonymousUser = _data["isAnonymousUser"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetChatMessagesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetChatMessagesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["isAnonymousUser"] = this.isAnonymousUser;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetChatMessagesRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    loggedDateUtc: Date;
}

export class GetChatMessagesResponse implements IGetChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    messages?: ChatMessage[] | undefined;

    constructor(data?: IGetChatMessagesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ChatMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetChatMessagesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetChatMessagesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    messages?: ChatMessage[] | undefined;
}

export class GetDetailedSummaryRequest implements IGetDetailedSummaryRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    loggedDateUtc?: Date;

    constructor(data?: IGetDetailedSummaryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.isAnonymousUser = _data["isAnonymousUser"];
            this.loggedDateUtc = _data["loggedDateUtc"] ? new Date(_data["loggedDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetDetailedSummaryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetDetailedSummaryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["isAnonymousUser"] = this.isAnonymousUser;
        data["loggedDateUtc"] = this.loggedDateUtc ? this.loggedDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetDetailedSummaryRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    loggedDateUtc?: Date;
}

export class GetDetailedSummaryResponse implements IGetDetailedSummaryResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    nutrients?: NutrientBreakdown[] | undefined;
    foods?: FoodBreakdown[] | undefined;
    summaryTotals?: SummaryTotals;
    dailyTarget?: DailyTarget;

    constructor(data?: IGetDetailedSummaryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["nutrients"])) {
                this.nutrients = [] as any;
                for (let item of _data["nutrients"])
                    this.nutrients!.push(NutrientBreakdown.fromJS(item));
            }
            if (Array.isArray(_data["foods"])) {
                this.foods = [] as any;
                for (let item of _data["foods"])
                    this.foods!.push(FoodBreakdown.fromJS(item));
            }
            this.summaryTotals = _data["summaryTotals"] ? SummaryTotals.fromJS(_data["summaryTotals"]) : <any>undefined;
            this.dailyTarget = _data["dailyTarget"] ? DailyTarget.fromJS(_data["dailyTarget"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetDetailedSummaryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDetailedSummaryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.nutrients)) {
            data["nutrients"] = [];
            for (let item of this.nutrients)
                data["nutrients"].push(item.toJSON());
        }
        if (Array.isArray(this.foods)) {
            data["foods"] = [];
            for (let item of this.foods)
                data["foods"].push(item.toJSON());
        }
        data["summaryTotals"] = this.summaryTotals ? this.summaryTotals.toJSON() : <any>undefined;
        data["dailyTarget"] = this.dailyTarget ? this.dailyTarget.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetDetailedSummaryResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    nutrients?: NutrientBreakdown[] | undefined;
    foods?: FoodBreakdown[] | undefined;
    summaryTotals?: SummaryTotals;
    dailyTarget?: DailyTarget;
}

export class LearnMoreAboutRequest implements ILearnMoreAboutRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    topic?: string | undefined;
    date?: Date | undefined;

    constructor(data?: ILearnMoreAboutRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.isAnonymousUser = _data["isAnonymousUser"];
            this.topic = _data["topic"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LearnMoreAboutRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LearnMoreAboutRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["isAnonymousUser"] = this.isAnonymousUser;
        data["topic"] = this.topic;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

export interface ILearnMoreAboutRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    topic?: string | undefined;
    date?: Date | undefined;
}

export class MacronutrientsSummary implements IMacronutrientsSummary {
    calories?: number;
    protein?: number;
    carbohydrates?: number;
    fat?: number;

    constructor(data?: IMacronutrientsSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.calories = _data["calories"];
            this.protein = _data["protein"];
            this.carbohydrates = _data["carbohydrates"];
            this.fat = _data["fat"];
        }
    }

    static fromJS(data: any): MacronutrientsSummary {
        data = typeof data === 'object' ? data : {};
        let result = new MacronutrientsSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["calories"] = this.calories;
        data["protein"] = this.protein;
        data["carbohydrates"] = this.carbohydrates;
        data["fat"] = this.fat;
        return data;
    }
}

export interface IMacronutrientsSummary {
    calories?: number;
    protein?: number;
    carbohydrates?: number;
    fat?: number;
}

export enum MessageRoleTypes {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class NutrientBreakdown implements INutrientBreakdown {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    unit?: string | undefined;
    totalAmount?: number;
    minTarget?: number | undefined;
    maxTarget?: number | undefined;
    valueType?: string | undefined;
    source?: string | undefined;
    sortOrder?: number;
    readonly percentOfTarget?: number | undefined;
    foods?: FoodContribution[] | undefined;

    constructor(data?: INutrientBreakdown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nutrientKey = _data["nutrientKey"];
            this.nutrientName = _data["nutrientName"];
            this.unit = _data["unit"];
            this.totalAmount = _data["totalAmount"];
            this.minTarget = _data["minTarget"];
            this.maxTarget = _data["maxTarget"];
            this.valueType = _data["valueType"];
            this.source = _data["source"];
            this.sortOrder = _data["sortOrder"];
            (<any>this).percentOfTarget = _data["percentOfTarget"];
            if (Array.isArray(_data["foods"])) {
                this.foods = [] as any;
                for (let item of _data["foods"])
                    this.foods!.push(FoodContribution.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NutrientBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new NutrientBreakdown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nutrientKey"] = this.nutrientKey;
        data["nutrientName"] = this.nutrientName;
        data["unit"] = this.unit;
        data["totalAmount"] = this.totalAmount;
        data["minTarget"] = this.minTarget;
        data["maxTarget"] = this.maxTarget;
        data["valueType"] = this.valueType;
        data["source"] = this.source;
        data["sortOrder"] = this.sortOrder;
        data["percentOfTarget"] = this.percentOfTarget;
        if (Array.isArray(this.foods)) {
            data["foods"] = [];
            for (let item of this.foods)
                data["foods"].push(item.toJSON());
        }
        return data;
    }
}

export interface INutrientBreakdown {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    unit?: string | undefined;
    totalAmount?: number;
    minTarget?: number | undefined;
    maxTarget?: number | undefined;
    valueType?: string | undefined;
    source?: string | undefined;
    sortOrder?: number;
    percentOfTarget?: number | undefined;
    foods?: FoodContribution[] | undefined;
}

export class NutrientContribution implements INutrientContribution {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    originalUnit?: string | undefined;

    constructor(data?: INutrientContribution) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nutrientKey = _data["nutrientKey"];
            this.nutrientName = _data["nutrientName"];
            this.name = _data["name"];
            this.brandName = _data["brandName"];
            this.amount = _data["amount"];
            this.unit = _data["unit"];
            this.originalUnit = _data["originalUnit"];
        }
    }

    static fromJS(data: any): NutrientContribution {
        data = typeof data === 'object' ? data : {};
        let result = new NutrientContribution();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nutrientKey"] = this.nutrientKey;
        data["nutrientName"] = this.nutrientName;
        data["name"] = this.name;
        data["brandName"] = this.brandName;
        data["amount"] = this.amount;
        data["unit"] = this.unit;
        data["originalUnit"] = this.originalUnit;
        return data;
    }
}

export interface INutrientContribution {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    originalUnit?: string | undefined;
}

export class NutrientTarget implements INutrientTarget {
    nutrientKey?: string | undefined;
    maxValue?: number | undefined;
    minValue?: number | undefined;
    unit?: string | undefined;
    valueType?: string | undefined;
    source?: string | undefined;

    constructor(data?: INutrientTarget) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nutrientKey = _data["nutrientKey"];
            this.maxValue = _data["maxValue"];
            this.minValue = _data["minValue"];
            this.unit = _data["unit"];
            this.valueType = _data["valueType"];
            this.source = _data["source"];
        }
    }

    static fromJS(data: any): NutrientTarget {
        data = typeof data === 'object' ? data : {};
        let result = new NutrientTarget();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nutrientKey"] = this.nutrientKey;
        data["maxValue"] = this.maxValue;
        data["minValue"] = this.minValue;
        data["unit"] = this.unit;
        data["valueType"] = this.valueType;
        data["source"] = this.source;
        return data;
    }
}

export interface INutrientTarget {
    nutrientKey?: string | undefined;
    maxValue?: number | undefined;
    minValue?: number | undefined;
    unit?: string | undefined;
    valueType?: string | undefined;
    source?: string | undefined;
}

export class RunChatRequest implements IRunChatRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    message?: string | undefined;

    constructor(data?: IRunChatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.isAnonymousUser = _data["isAnonymousUser"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): RunChatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RunChatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["isAnonymousUser"] = this.isAnonymousUser;
        data["message"] = this.message;
        return data;
    }
}

export interface IRunChatRequest {
    accountId?: string | undefined;
    isAnonymousUser?: boolean;
    message?: string | undefined;
}

export class SummaryTotals implements ISummaryTotals {
    totalCalories?: number;
    macronutrients?: MacronutrientsSummary;

    constructor(data?: ISummaryTotals) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCalories = _data["totalCalories"];
            this.macronutrients = _data["macronutrients"] ? MacronutrientsSummary.fromJS(_data["macronutrients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SummaryTotals {
        data = typeof data === 'object' ? data : {};
        let result = new SummaryTotals();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCalories"] = this.totalCalories;
        data["macronutrients"] = this.macronutrients ? this.macronutrients.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISummaryTotals {
    totalCalories?: number;
    macronutrients?: MacronutrientsSummary;
}

export class ToolCall implements IToolCall {
    id?: string | undefined;
    type?: string | undefined;
    function?: ToolFunctionCall;

    constructor(data?: IToolCall) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.function = _data["function"] ? ToolFunctionCall.fromJS(_data["function"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ToolCall {
        data = typeof data === 'object' ? data : {};
        let result = new ToolCall();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["function"] = this.function ? this.function.toJSON() : <any>undefined;
        return data;
    }
}

export interface IToolCall {
    id?: string | undefined;
    type?: string | undefined;
    function?: ToolFunctionCall;
}

export class ToolFunctionCall implements IToolFunctionCall {
    name?: string | undefined;
    arguments?: string | undefined;

    constructor(data?: IToolFunctionCall) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.arguments = _data["arguments"];
        }
    }

    static fromJS(data: any): ToolFunctionCall {
        data = typeof data === 'object' ? data : {};
        let result = new ToolFunctionCall();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["arguments"] = this.arguments;
        return data;
    }
}

export interface IToolFunctionCall {
    name?: string | undefined;
    arguments?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}