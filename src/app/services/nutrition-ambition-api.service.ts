//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface INutritionAmbitionApiService {
    /**
     * @param body (optional) 
     * @return Success
     */
    registerAccount(body: RegisterAccountRequest | undefined): Observable<AccountResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getAccount(body: Request | undefined): Observable<AccountResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    changePassword(body: ChangePasswordRequest | undefined): Observable<Response>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getFeedbackWithAccountInfo(body: GetFeedbackWithAccountInfoRequest | undefined): Observable<GetFeedbackWithAccountInfoResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    completeFeedback(body: CompleteFeedbackRequest | undefined): Observable<CompleteFeedbackResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFeedback(body: DeleteFeedbackRequest | undefined): Observable<DeleteFeedbackResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getUserChatMessages(body: GetUserChatMessagesRequest | undefined): Observable<GetUserChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    searchLogs(body: SearchLogsRequest | undefined): Observable<SearchLogsResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getAllAccounts(body: GetAllAccountsRequest | undefined): Observable<GetAllAccountsResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    deleteAccount(body: DeleteAccountRequest | undefined): Observable<DeleteAccountResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    clearAccountData(body: ClearAccountDataRequest | undefined): Observable<ClearAccountDataResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getAccountDataCounts(body: GetAccountDataCountsRequest | undefined): Observable<GetAccountDataCountsResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getChatMessages(body: GetChatMessagesRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    runResponsesConversation(body: RunChatRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    learnMoreAbout(body: LearnMoreAboutRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    estimate(body: EstimateUnitConversionsRequest | undefined): Observable<EstimateUnitConversionsResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getDetailedSummary(body: GetDetailedSummaryRequest | undefined): Observable<GetDetailedSummaryResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFoodEntry(body: DeleteFoodEntryRequest | undefined): Observable<DeleteFoodEntryResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    submitServingSelection(body: SubmitServingSelectionRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    cancelFoodLogging(body: CancelServingSelectionRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    startEditSelection(body: EditFoodSelectionRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    submitEditServingSelection(body: SubmitEditServingSelectionRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    cancelEditSelection(body: CancelEditSelectionRequest | undefined): Observable<ChatMessagesResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    updateFoodPhrase(body: SearchFoodPhraseRequest | undefined): Observable<SearchFoodPhraseResponse>;
    /**
     * @param body (optional) 
     * @return Success
     */
    searchFoodPhrase(body: SearchFoodPhraseRequest | undefined): Observable<SearchFoodPhraseResponse>;
    /**
     * @return Success
     */
    ip(): Observable<void>;
}

@Injectable()
export class NutritionAmbitionApiService implements INutritionAmbitionApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    registerAccount(body: RegisterAccountRequest | undefined): Observable<AccountResponse> {
        let url_ = this.baseUrl + "/api/Accounts/RegisterAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterAccount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AccountResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AccountResponse>;
        }));
    }

    protected processRegisterAccount(response: HttpResponseBase): Observable<AccountResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccountResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AccountResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAccount(body: Request | undefined): Observable<AccountResponse> {
        let url_ = this.baseUrl + "/api/Accounts/GetAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAccount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AccountResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AccountResponse>;
        }));
    }

    protected processGetAccount(response: HttpResponseBase): Observable<AccountResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccountResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AccountResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    changePassword(body: ChangePasswordRequest | undefined): Observable<Response> {
        let url_ = this.baseUrl + "/api/Accounts/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Response>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Response>;
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<Response> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Response.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Response>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getFeedbackWithAccountInfo(body: GetFeedbackWithAccountInfoRequest | undefined): Observable<GetFeedbackWithAccountInfoResponse> {
        let url_ = this.baseUrl + "/api/Admin/GetFeedbackWithAccountInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeedbackWithAccountInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeedbackWithAccountInfo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetFeedbackWithAccountInfoResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetFeedbackWithAccountInfoResponse>;
        }));
    }

    protected processGetFeedbackWithAccountInfo(response: HttpResponseBase): Observable<GetFeedbackWithAccountInfoResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetFeedbackWithAccountInfoResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetFeedbackWithAccountInfoResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    completeFeedback(body: CompleteFeedbackRequest | undefined): Observable<CompleteFeedbackResponse> {
        let url_ = this.baseUrl + "/api/Admin/CompleteFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCompleteFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCompleteFeedback(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CompleteFeedbackResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CompleteFeedbackResponse>;
        }));
    }

    protected processCompleteFeedback(response: HttpResponseBase): Observable<CompleteFeedbackResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompleteFeedbackResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CompleteFeedbackResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFeedback(body: DeleteFeedbackRequest | undefined): Observable<DeleteFeedbackResponse> {
        let url_ = this.baseUrl + "/api/Admin/DeleteFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFeedback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFeedback(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeleteFeedbackResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeleteFeedbackResponse>;
        }));
    }

    protected processDeleteFeedback(response: HttpResponseBase): Observable<DeleteFeedbackResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeleteFeedbackResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeleteFeedbackResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getUserChatMessages(body: GetUserChatMessagesRequest | undefined): Observable<GetUserChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Admin/GetUserChatMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserChatMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserChatMessages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetUserChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetUserChatMessagesResponse>;
        }));
    }

    protected processGetUserChatMessages(response: HttpResponseBase): Observable<GetUserChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetUserChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetUserChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    searchLogs(body: SearchLogsRequest | undefined): Observable<SearchLogsResponse> {
        let url_ = this.baseUrl + "/api/Admin/SearchLogs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchLogs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchLogs(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchLogsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchLogsResponse>;
        }));
    }

    protected processSearchLogs(response: HttpResponseBase): Observable<SearchLogsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchLogsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SearchLogsResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAllAccounts(body: GetAllAccountsRequest | undefined): Observable<GetAllAccountsResponse> {
        let url_ = this.baseUrl + "/api/Admin/GetAllAccounts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllAccounts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllAccounts(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllAccountsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllAccountsResponse>;
        }));
    }

    protected processGetAllAccounts(response: HttpResponseBase): Observable<GetAllAccountsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetAllAccountsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetAllAccountsResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteAccount(body: DeleteAccountRequest | undefined): Observable<DeleteAccountResponse> {
        let url_ = this.baseUrl + "/api/Admin/DeleteAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAccount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeleteAccountResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeleteAccountResponse>;
        }));
    }

    protected processDeleteAccount(response: HttpResponseBase): Observable<DeleteAccountResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeleteAccountResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeleteAccountResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    clearAccountData(body: ClearAccountDataRequest | undefined): Observable<ClearAccountDataResponse> {
        let url_ = this.baseUrl + "/api/Admin/ClearAccountData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClearAccountData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearAccountData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ClearAccountDataResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ClearAccountDataResponse>;
        }));
    }

    protected processClearAccountData(response: HttpResponseBase): Observable<ClearAccountDataResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClearAccountDataResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClearAccountDataResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAccountDataCounts(body: GetAccountDataCountsRequest | undefined): Observable<GetAccountDataCountsResponse> {
        let url_ = this.baseUrl + "/api/Admin/GetAccountDataCounts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAccountDataCounts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAccountDataCounts(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAccountDataCountsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAccountDataCountsResponse>;
        }));
    }

    protected processGetAccountDataCounts(response: HttpResponseBase): Observable<GetAccountDataCountsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetAccountDataCountsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetAccountDataCountsResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getChatMessages(body: GetChatMessagesRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Conversation/GetChatMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetChatMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetChatMessages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processGetChatMessages(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    runResponsesConversation(body: RunChatRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Conversation/RunResponsesConversation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRunResponsesConversation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRunResponsesConversation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processRunResponsesConversation(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    learnMoreAbout(body: LearnMoreAboutRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/Conversation/LearnMoreAbout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLearnMoreAbout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLearnMoreAbout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processLearnMoreAbout(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    estimate(body: EstimateUnitConversionsRequest | undefined): Observable<EstimateUnitConversionsResponse> {
        let url_ = this.baseUrl + "/api/Conversions/Estimate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEstimate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEstimate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EstimateUnitConversionsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EstimateUnitConversionsResponse>;
        }));
    }

    protected processEstimate(response: HttpResponseBase): Observable<EstimateUnitConversionsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EstimateUnitConversionsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EstimateUnitConversionsResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getDetailedSummary(body: GetDetailedSummaryRequest | undefined): Observable<GetDetailedSummaryResponse> {
        let url_ = this.baseUrl + "/api/DetailedSummary/GetDetailedSummary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetailedSummary(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetailedSummary(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetDetailedSummaryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetDetailedSummaryResponse>;
        }));
    }

    protected processGetDetailedSummary(response: HttpResponseBase): Observable<GetDetailedSummaryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetDetailedSummaryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetDetailedSummaryResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFoodEntry(body: DeleteFoodEntryRequest | undefined): Observable<DeleteFoodEntryResponse> {
        let url_ = this.baseUrl + "/api/FoodEntry/DeleteFoodEntry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFoodEntry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFoodEntry(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeleteFoodEntryResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeleteFoodEntryResponse>;
        }));
    }

    protected processDeleteFoodEntry(response: HttpResponseBase): Observable<DeleteFoodEntryResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeleteFoodEntryResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeleteFoodEntryResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    submitServingSelection(body: SubmitServingSelectionRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/SubmitServingSelection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSubmitServingSelection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmitServingSelection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processSubmitServingSelection(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cancelFoodLogging(body: CancelServingSelectionRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/CancelFoodLogging";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelFoodLogging(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelFoodLogging(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processCancelFoodLogging(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    startEditSelection(body: EditFoodSelectionRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/StartEditSelection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartEditSelection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartEditSelection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processStartEditSelection(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    submitEditServingSelection(body: SubmitEditServingSelectionRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/SubmitEditServingSelection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSubmitEditServingSelection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmitEditServingSelection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processSubmitEditServingSelection(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    cancelEditSelection(body: CancelEditSelectionRequest | undefined): Observable<ChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/CancelEditSelection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelEditSelection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelEditSelection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ChatMessagesResponse>;
        }));
    }

    protected processCancelEditSelection(response: HttpResponseBase): Observable<ChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ChatMessagesResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateFoodPhrase(body: SearchFoodPhraseRequest | undefined): Observable<SearchFoodPhraseResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/UpdateFoodPhrase";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFoodPhrase(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFoodPhrase(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchFoodPhraseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchFoodPhraseResponse>;
        }));
    }

    protected processUpdateFoodPhrase(response: HttpResponseBase): Observable<SearchFoodPhraseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchFoodPhraseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SearchFoodPhraseResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    searchFoodPhrase(body: SearchFoodPhraseRequest | undefined): Observable<SearchFoodPhraseResponse> {
        let url_ = this.baseUrl + "/api/FoodSelection/SearchFoodPhrase";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchFoodPhrase(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchFoodPhrase(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchFoodPhraseResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchFoodPhraseResponse>;
        }));
    }

    protected processSearchFoodPhrase(response: HttpResponseBase): Observable<SearchFoodPhraseResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchFoodPhraseResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SearchFoodPhraseResponse>(null as any);
    }

    /**
     * @return Success
     */
    ip(): Observable<void> {
        let url_ = this.baseUrl + "/api/Test/ip";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIp(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIp(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processIp(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

export class Account implements IAccount {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    name?: string | undefined;
    email?: string | undefined;
    timeZoneId?: string | undefined;
    isOwner?: boolean;
    hasUnacknowledgedFeedbackResponses?: boolean;
    canDelete?: boolean;
    canClear?: boolean;

    constructor(data?: IAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            this.lastUpdatedDateUtc = _data["lastUpdatedDateUtc"] ? new Date(_data["lastUpdatedDateUtc"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.email = _data["email"];
            this.timeZoneId = _data["timeZoneId"];
            this.isOwner = _data["isOwner"];
            this.hasUnacknowledgedFeedbackResponses = _data["hasUnacknowledgedFeedbackResponses"];
            this.canDelete = _data["canDelete"];
            this.canClear = _data["canClear"];
        }
    }

    static fromJS(data: any): Account {
        data = typeof data === 'object' ? data : {};
        let result = new Account();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastUpdatedDateUtc"] = this.lastUpdatedDateUtc ? this.lastUpdatedDateUtc.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["email"] = this.email;
        data["timeZoneId"] = this.timeZoneId;
        data["isOwner"] = this.isOwner;
        data["hasUnacknowledgedFeedbackResponses"] = this.hasUnacknowledgedFeedbackResponses;
        data["canDelete"] = this.canDelete;
        data["canClear"] = this.canClear;
        return data;
    }
}

export interface IAccount {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    name?: string | undefined;
    email?: string | undefined;
    timeZoneId?: string | undefined;
    isOwner?: boolean;
    hasUnacknowledgedFeedbackResponses?: boolean;
    canDelete?: boolean;
    canClear?: boolean;
}

export class AccountResponse implements IAccountResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    account?: Account;

    constructor(data?: IAccountResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.account = _data["account"] ? Account.fromJS(_data["account"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AccountResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["account"] = this.account ? this.account.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAccountResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    account?: Account;
}

export enum AssistantModeTypes {
    Default = "Default",
    GoalSetting = "GoalSetting",
    UserFeedback = "UserFeedback",
}

export class BuildStamp implements IBuildStamp {
    appVersion?: string | undefined;
    previousCommitHash?: string | undefined;

    constructor(data?: IBuildStamp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appVersion = _data["appVersion"];
            this.previousCommitHash = _data["previousCommitHash"];
        }
    }

    static fromJS(data: any): BuildStamp {
        data = typeof data === 'object' ? data : {};
        let result = new BuildStamp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appVersion"] = this.appVersion;
        data["previousCommitHash"] = this.previousCommitHash;
        return data;
    }
}

export interface IBuildStamp {
    appVersion?: string | undefined;
    previousCommitHash?: string | undefined;
}

export class CancelEditSelectionRequest implements ICancelEditSelectionRequest {
    pendingMessageId?: string | undefined;
    localDateKey?: string | undefined;

    constructor(data?: ICancelEditSelectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pendingMessageId = _data["pendingMessageId"];
            this.localDateKey = _data["localDateKey"];
        }
    }

    static fromJS(data: any): CancelEditSelectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CancelEditSelectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pendingMessageId"] = this.pendingMessageId;
        data["localDateKey"] = this.localDateKey;
        return data;
    }
}

export interface ICancelEditSelectionRequest {
    pendingMessageId?: string | undefined;
    localDateKey?: string | undefined;
}

export class CancelServingSelectionRequest implements ICancelServingSelectionRequest {
    pendingMessageId?: string | undefined;
    localDateKey?: string | undefined;

    constructor(data?: ICancelServingSelectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pendingMessageId = _data["pendingMessageId"];
            this.localDateKey = _data["localDateKey"];
        }
    }

    static fromJS(data: any): CancelServingSelectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CancelServingSelectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pendingMessageId"] = this.pendingMessageId;
        data["localDateKey"] = this.localDateKey;
        return data;
    }
}

export interface ICancelServingSelectionRequest {
    pendingMessageId?: string | undefined;
    localDateKey?: string | undefined;
}

export class ChangePasswordRequest implements IChangePasswordRequest {
    newPassword?: string | undefined;

    constructor(data?: IChangePasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IChangePasswordRequest {
    newPassword?: string | undefined;
}

export class ChatMessage implements IChatMessage {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    role?: MessageRoleTypes;
    content?: string | undefined;
    localDateKey?: string | undefined;
    foodEntryId?: string | undefined;
    isRead?: boolean;
    toolCallId?: string | undefined;
    toolFunctionName?: string | undefined;
    toolCallArgumentsJson?: string | undefined;
    responseId?: string | undefined;
    assistantMode?: AssistantModeTypes;
    assistantPhase?: string | undefined;
    logMealToolResponse?: LogMealToolResponse;
    modelUsed?: string | undefined;
    promptTokens?: number | undefined;
    completionTokens?: number | undefined;
    totalTokens?: number | undefined;

    constructor(data?: IChatMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            this.lastUpdatedDateUtc = _data["lastUpdatedDateUtc"] ? new Date(_data["lastUpdatedDateUtc"].toString()) : <any>undefined;
            this.accountId = _data["accountId"];
            this.role = _data["role"];
            this.content = _data["content"];
            this.localDateKey = _data["localDateKey"];
            this.foodEntryId = _data["foodEntryId"];
            this.isRead = _data["isRead"];
            this.toolCallId = _data["toolCallId"];
            this.toolFunctionName = _data["toolFunctionName"];
            this.toolCallArgumentsJson = _data["toolCallArgumentsJson"];
            this.responseId = _data["responseId"];
            this.assistantMode = _data["assistantMode"];
            this.assistantPhase = _data["assistantPhase"];
            this.logMealToolResponse = _data["logMealToolResponse"] ? LogMealToolResponse.fromJS(_data["logMealToolResponse"]) : <any>undefined;
            this.modelUsed = _data["modelUsed"];
            this.promptTokens = _data["promptTokens"];
            this.completionTokens = _data["completionTokens"];
            this.totalTokens = _data["totalTokens"];
        }
    }

    static fromJS(data: any): ChatMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastUpdatedDateUtc"] = this.lastUpdatedDateUtc ? this.lastUpdatedDateUtc.toISOString() : <any>undefined;
        data["accountId"] = this.accountId;
        data["role"] = this.role;
        data["content"] = this.content;
        data["localDateKey"] = this.localDateKey;
        data["foodEntryId"] = this.foodEntryId;
        data["isRead"] = this.isRead;
        data["toolCallId"] = this.toolCallId;
        data["toolFunctionName"] = this.toolFunctionName;
        data["toolCallArgumentsJson"] = this.toolCallArgumentsJson;
        data["responseId"] = this.responseId;
        data["assistantMode"] = this.assistantMode;
        data["assistantPhase"] = this.assistantPhase;
        data["logMealToolResponse"] = this.logMealToolResponse ? this.logMealToolResponse.toJSON() : <any>undefined;
        data["modelUsed"] = this.modelUsed;
        data["promptTokens"] = this.promptTokens;
        data["completionTokens"] = this.completionTokens;
        data["totalTokens"] = this.totalTokens;
        return data;
    }
}

export interface IChatMessage {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    role?: MessageRoleTypes;
    content?: string | undefined;
    localDateKey?: string | undefined;
    foodEntryId?: string | undefined;
    isRead?: boolean;
    toolCallId?: string | undefined;
    toolFunctionName?: string | undefined;
    toolCallArgumentsJson?: string | undefined;
    responseId?: string | undefined;
    assistantMode?: AssistantModeTypes;
    assistantPhase?: string | undefined;
    logMealToolResponse?: LogMealToolResponse;
    modelUsed?: string | undefined;
    promptTokens?: number | undefined;
    completionTokens?: number | undefined;
    totalTokens?: number | undefined;
}

export class ChatMessagesResponse implements IChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    messages?: ChatMessage[] | undefined;

    constructor(data?: IChatMessagesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ChatMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChatMessagesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessagesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    messages?: ChatMessage[] | undefined;
}

export class ClearAccountDataRequest implements IClearAccountDataRequest {
    accountId?: string | undefined;
    confirmClear?: boolean;

    constructor(data?: IClearAccountDataRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.confirmClear = _data["confirmClear"];
        }
    }

    static fromJS(data: any): ClearAccountDataRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ClearAccountDataRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["confirmClear"] = this.confirmClear;
        return data;
    }
}

export interface IClearAccountDataRequest {
    accountId?: string | undefined;
    confirmClear?: boolean;
}

export class ClearAccountDataResponse implements IClearAccountDataResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    dataCleared?: boolean;
    clearedAccountId?: string | undefined;
    totalRecordsDeleted?: number;
    deletedRecordsByType?: { [key: string]: number; } | undefined;

    constructor(data?: IClearAccountDataResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.dataCleared = _data["dataCleared"];
            this.clearedAccountId = _data["clearedAccountId"];
            this.totalRecordsDeleted = _data["totalRecordsDeleted"];
            if (_data["deletedRecordsByType"]) {
                this.deletedRecordsByType = {} as any;
                for (let key in _data["deletedRecordsByType"]) {
                    if (_data["deletedRecordsByType"].hasOwnProperty(key))
                        (<any>this.deletedRecordsByType)![key] = _data["deletedRecordsByType"][key];
                }
            }
        }
    }

    static fromJS(data: any): ClearAccountDataResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClearAccountDataResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["dataCleared"] = this.dataCleared;
        data["clearedAccountId"] = this.clearedAccountId;
        data["totalRecordsDeleted"] = this.totalRecordsDeleted;
        if (this.deletedRecordsByType) {
            data["deletedRecordsByType"] = {};
            for (let key in this.deletedRecordsByType) {
                if (this.deletedRecordsByType.hasOwnProperty(key))
                    (<any>data["deletedRecordsByType"])[key] = (<any>this.deletedRecordsByType)[key];
            }
        }
        return data;
    }
}

export interface IClearAccountDataResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    dataCleared?: boolean;
    clearedAccountId?: string | undefined;
    totalRecordsDeleted?: number;
    deletedRecordsByType?: { [key: string]: number; } | undefined;
}

export class CompleteFeedbackRequest implements ICompleteFeedbackRequest {
    feedbackId?: string | undefined;
    completionNote!: string;
    isCompleted?: boolean;

    constructor(data?: ICompleteFeedbackRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedbackId = _data["feedbackId"];
            this.completionNote = _data["completionNote"];
            this.isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): CompleteFeedbackRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteFeedbackRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedbackId"] = this.feedbackId;
        data["completionNote"] = this.completionNote;
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface ICompleteFeedbackRequest {
    feedbackId?: string | undefined;
    completionNote: string;
    isCompleted?: boolean;
}

export class CompleteFeedbackResponse implements ICompleteFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackEntry?: FeedbackEntry;

    constructor(data?: ICompleteFeedbackResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.feedbackEntry = _data["feedbackEntry"] ? FeedbackEntry.fromJS(_data["feedbackEntry"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CompleteFeedbackResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteFeedbackResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["feedbackEntry"] = this.feedbackEntry ? this.feedbackEntry.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICompleteFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackEntry?: FeedbackEntry;
}

export class Component implements IComponent {
    id?: string | undefined;
    selectedComponentId?: string | undefined;
    matches?: ComponentMatch[] | undefined;

    constructor(data?: IComponent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.selectedComponentId = _data["selectedComponentId"];
            if (Array.isArray(_data["matches"])) {
                this.matches = [] as any;
                for (let item of _data["matches"])
                    this.matches!.push(ComponentMatch.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Component {
        data = typeof data === 'object' ? data : {};
        let result = new Component();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["selectedComponentId"] = this.selectedComponentId;
        if (Array.isArray(this.matches)) {
            data["matches"] = [];
            for (let item of this.matches)
                data["matches"].push(item.toJSON());
        }
        return data;
    }
}

export interface IComponent {
    id?: string | undefined;
    selectedComponentId?: string | undefined;
    matches?: ComponentMatch[] | undefined;
}

export class ComponentBreakdown implements IComponentBreakdown {
    componentId?: string | undefined;
    componentKey?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    totalAmount?: number;
    unit?: string | undefined;
    nutrients?: NutrientContribution[] | undefined;

    constructor(data?: IComponentBreakdown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.componentId = _data["componentId"];
            this.componentKey = _data["componentKey"];
            this.name = _data["name"];
            this.brandName = _data["brandName"];
            this.totalAmount = _data["totalAmount"];
            this.unit = _data["unit"];
            if (Array.isArray(_data["nutrients"])) {
                this.nutrients = [] as any;
                for (let item of _data["nutrients"])
                    this.nutrients!.push(NutrientContribution.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ComponentBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new ComponentBreakdown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["componentId"] = this.componentId;
        data["componentKey"] = this.componentKey;
        data["name"] = this.name;
        data["brandName"] = this.brandName;
        data["totalAmount"] = this.totalAmount;
        data["unit"] = this.unit;
        if (Array.isArray(this.nutrients)) {
            data["nutrients"] = [];
            for (let item of this.nutrients)
                data["nutrients"].push(item.toJSON());
        }
        return data;
    }
}

export interface IComponentBreakdown {
    componentId?: string | undefined;
    componentKey?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    totalAmount?: number;
    unit?: string | undefined;
    nutrients?: NutrientContribution[] | undefined;
}

export class ComponentMatch implements IComponentMatch {
    provider?: string | undefined;
    externalFoodId?: string | undefined;
    fatSecretFoodId?: string | undefined;
    displayName?: string | undefined;
    brandName?: string | undefined;
    originalText?: string | undefined;
    description?: string | undefined;
    cookingMethod?: string | undefined;
    size?: string | undefined;
    rank?: number;
    selectedServingId?: string | undefined;
    totalGrams?: number;
    servings?: ComponentServing[] | undefined;
    effectiveMultiplier?: number;
    effectiveQuantity?: number;
    inferred?: boolean;
    inferredReason?: string | undefined;
    searchText?: string | undefined;

    constructor(data?: IComponentMatch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.provider = _data["provider"];
            this.externalFoodId = _data["externalFoodId"];
            this.fatSecretFoodId = _data["fatSecretFoodId"];
            this.displayName = _data["displayName"];
            this.brandName = _data["brandName"];
            this.originalText = _data["originalText"];
            this.description = _data["description"];
            this.cookingMethod = _data["cookingMethod"];
            this.size = _data["size"];
            this.rank = _data["rank"];
            this.selectedServingId = _data["selectedServingId"];
            this.totalGrams = _data["totalGrams"];
            if (Array.isArray(_data["servings"])) {
                this.servings = [] as any;
                for (let item of _data["servings"])
                    this.servings!.push(ComponentServing.fromJS(item));
            }
            this.effectiveMultiplier = _data["effectiveMultiplier"];
            this.effectiveQuantity = _data["effectiveQuantity"];
            this.inferred = _data["inferred"];
            this.inferredReason = _data["inferredReason"];
            this.searchText = _data["searchText"];
        }
    }

    static fromJS(data: any): ComponentMatch {
        data = typeof data === 'object' ? data : {};
        let result = new ComponentMatch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provider"] = this.provider;
        data["externalFoodId"] = this.externalFoodId;
        data["fatSecretFoodId"] = this.fatSecretFoodId;
        data["displayName"] = this.displayName;
        data["brandName"] = this.brandName;
        data["originalText"] = this.originalText;
        data["description"] = this.description;
        data["cookingMethod"] = this.cookingMethod;
        data["size"] = this.size;
        data["rank"] = this.rank;
        data["selectedServingId"] = this.selectedServingId;
        data["totalGrams"] = this.totalGrams;
        if (Array.isArray(this.servings)) {
            data["servings"] = [];
            for (let item of this.servings)
                data["servings"].push(item.toJSON());
        }
        data["effectiveMultiplier"] = this.effectiveMultiplier;
        data["effectiveQuantity"] = this.effectiveQuantity;
        data["inferred"] = this.inferred;
        data["inferredReason"] = this.inferredReason;
        data["searchText"] = this.searchText;
        return data;
    }
}

export interface IComponentMatch {
    provider?: string | undefined;
    externalFoodId?: string | undefined;
    fatSecretFoodId?: string | undefined;
    displayName?: string | undefined;
    brandName?: string | undefined;
    originalText?: string | undefined;
    description?: string | undefined;
    cookingMethod?: string | undefined;
    size?: string | undefined;
    rank?: number;
    selectedServingId?: string | undefined;
    totalGrams?: number;
    servings?: ComponentServing[] | undefined;
    effectiveMultiplier?: number;
    effectiveQuantity?: number;
    inferred?: boolean;
    inferredReason?: string | undefined;
    searchText?: string | undefined;
}

export class ComponentServing implements IComponentServing {
    externalServingId?: string | undefined;
    fatSecretServingId?: string | undefined;
    description?: string | undefined;
    displayQuantity?: number;
    displayUnit?: string | undefined;
    scaledQuantity?: number;
    scaledUnit?: string | undefined;
    metricServingAmount?: number | undefined;
    metricServingUnit?: string | undefined;
    numberOfUnits?: number | undefined;
    measurementDescription?: string | undefined;
    weightGramsPerUnit?: number | undefined;
    nutrients?: { [key: string]: number; } | undefined;
    apiServingKind?: UnitKind;

    constructor(data?: IComponentServing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.externalServingId = _data["externalServingId"];
            this.fatSecretServingId = _data["fatSecretServingId"];
            this.description = _data["description"];
            this.displayQuantity = _data["displayQuantity"];
            this.displayUnit = _data["displayUnit"];
            this.scaledQuantity = _data["scaledQuantity"];
            this.scaledUnit = _data["scaledUnit"];
            this.metricServingAmount = _data["metricServingAmount"];
            this.metricServingUnit = _data["metricServingUnit"];
            this.numberOfUnits = _data["numberOfUnits"];
            this.measurementDescription = _data["measurementDescription"];
            this.weightGramsPerUnit = _data["weightGramsPerUnit"];
            if (_data["nutrients"]) {
                this.nutrients = {} as any;
                for (let key in _data["nutrients"]) {
                    if (_data["nutrients"].hasOwnProperty(key))
                        (<any>this.nutrients)![key] = _data["nutrients"][key];
                }
            }
            this.apiServingKind = _data["apiServingKind"];
        }
    }

    static fromJS(data: any): ComponentServing {
        data = typeof data === 'object' ? data : {};
        let result = new ComponentServing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["externalServingId"] = this.externalServingId;
        data["fatSecretServingId"] = this.fatSecretServingId;
        data["description"] = this.description;
        data["displayQuantity"] = this.displayQuantity;
        data["displayUnit"] = this.displayUnit;
        data["scaledQuantity"] = this.scaledQuantity;
        data["scaledUnit"] = this.scaledUnit;
        data["metricServingAmount"] = this.metricServingAmount;
        data["metricServingUnit"] = this.metricServingUnit;
        data["numberOfUnits"] = this.numberOfUnits;
        data["measurementDescription"] = this.measurementDescription;
        data["weightGramsPerUnit"] = this.weightGramsPerUnit;
        if (this.nutrients) {
            data["nutrients"] = {};
            for (let key in this.nutrients) {
                if (this.nutrients.hasOwnProperty(key))
                    (<any>data["nutrients"])[key] = (<any>this.nutrients)[key];
            }
        }
        data["apiServingKind"] = this.apiServingKind;
        return data;
    }
}

export interface IComponentServing {
    externalServingId?: string | undefined;
    fatSecretServingId?: string | undefined;
    description?: string | undefined;
    displayQuantity?: number;
    displayUnit?: string | undefined;
    scaledQuantity?: number;
    scaledUnit?: string | undefined;
    metricServingAmount?: number | undefined;
    metricServingUnit?: string | undefined;
    numberOfUnits?: number | undefined;
    measurementDescription?: string | undefined;
    weightGramsPerUnit?: number | undefined;
    nutrients?: { [key: string]: number; } | undefined;
    apiServingKind?: UnitKind;
}

export class DailySummary implements IDailySummary {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    localDateKey?: string | undefined;
    nutrients?: NutrientBreakdown[] | undefined;
    foods?: FoodBreakdown[] | undefined;
    foodEntries?: FoodEntryBreakdown[] | undefined;

    constructor(data?: IDailySummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            this.lastUpdatedDateUtc = _data["lastUpdatedDateUtc"] ? new Date(_data["lastUpdatedDateUtc"].toString()) : <any>undefined;
            this.accountId = _data["accountId"];
            this.localDateKey = _data["localDateKey"];
            if (Array.isArray(_data["nutrients"])) {
                this.nutrients = [] as any;
                for (let item of _data["nutrients"])
                    this.nutrients!.push(NutrientBreakdown.fromJS(item));
            }
            if (Array.isArray(_data["foods"])) {
                this.foods = [] as any;
                for (let item of _data["foods"])
                    this.foods!.push(FoodBreakdown.fromJS(item));
            }
            if (Array.isArray(_data["foodEntries"])) {
                this.foodEntries = [] as any;
                for (let item of _data["foodEntries"])
                    this.foodEntries!.push(FoodEntryBreakdown.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DailySummary {
        data = typeof data === 'object' ? data : {};
        let result = new DailySummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastUpdatedDateUtc"] = this.lastUpdatedDateUtc ? this.lastUpdatedDateUtc.toISOString() : <any>undefined;
        data["accountId"] = this.accountId;
        data["localDateKey"] = this.localDateKey;
        if (Array.isArray(this.nutrients)) {
            data["nutrients"] = [];
            for (let item of this.nutrients)
                data["nutrients"].push(item.toJSON());
        }
        if (Array.isArray(this.foods)) {
            data["foods"] = [];
            for (let item of this.foods)
                data["foods"].push(item.toJSON());
        }
        if (Array.isArray(this.foodEntries)) {
            data["foodEntries"] = [];
            for (let item of this.foodEntries)
                data["foodEntries"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDailySummary {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    localDateKey?: string | undefined;
    nutrients?: NutrientBreakdown[] | undefined;
    foods?: FoodBreakdown[] | undefined;
    foodEntries?: FoodEntryBreakdown[] | undefined;
}

export class DeleteAccountRequest implements IDeleteAccountRequest {
    accountId!: string;
    confirmDelete?: boolean;

    constructor(data?: IDeleteAccountRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.confirmDelete = _data["confirmDelete"];
        }
    }

    static fromJS(data: any): DeleteAccountRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAccountRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["confirmDelete"] = this.confirmDelete;
        return data;
    }
}

export interface IDeleteAccountRequest {
    accountId: string;
    confirmDelete?: boolean;
}

export class DeleteAccountResponse implements IDeleteAccountResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    accountDeleted?: boolean;
    deletedAccountId?: string | undefined;
    totalRecordsDeleted?: number;
    deletedRecordsByType?: { [key: string]: number; } | undefined;

    constructor(data?: IDeleteAccountResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.accountDeleted = _data["accountDeleted"];
            this.deletedAccountId = _data["deletedAccountId"];
            this.totalRecordsDeleted = _data["totalRecordsDeleted"];
            if (_data["deletedRecordsByType"]) {
                this.deletedRecordsByType = {} as any;
                for (let key in _data["deletedRecordsByType"]) {
                    if (_data["deletedRecordsByType"].hasOwnProperty(key))
                        (<any>this.deletedRecordsByType)![key] = _data["deletedRecordsByType"][key];
                }
            }
        }
    }

    static fromJS(data: any): DeleteAccountResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAccountResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["accountDeleted"] = this.accountDeleted;
        data["deletedAccountId"] = this.deletedAccountId;
        data["totalRecordsDeleted"] = this.totalRecordsDeleted;
        if (this.deletedRecordsByType) {
            data["deletedRecordsByType"] = {};
            for (let key in this.deletedRecordsByType) {
                if (this.deletedRecordsByType.hasOwnProperty(key))
                    (<any>data["deletedRecordsByType"])[key] = (<any>this.deletedRecordsByType)[key];
            }
        }
        return data;
    }
}

export interface IDeleteAccountResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    accountDeleted?: boolean;
    deletedAccountId?: string | undefined;
    totalRecordsDeleted?: number;
    deletedRecordsByType?: { [key: string]: number; } | undefined;
}

export class DeleteFeedbackRequest implements IDeleteFeedbackRequest {
    feedbackId?: string | undefined;

    constructor(data?: IDeleteFeedbackRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedbackId = _data["feedbackId"];
        }
    }

    static fromJS(data: any): DeleteFeedbackRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFeedbackRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedbackId"] = this.feedbackId;
        return data;
    }
}

export interface IDeleteFeedbackRequest {
    feedbackId?: string | undefined;
}

export class DeleteFeedbackResponse implements IDeleteFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    deleted?: boolean;

    constructor(data?: IDeleteFeedbackResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.deleted = _data["deleted"];
        }
    }

    static fromJS(data: any): DeleteFeedbackResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFeedbackResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["deleted"] = this.deleted;
        return data;
    }
}

export interface IDeleteFeedbackResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    deleted?: boolean;
}

export class DeleteFoodEntryRequest implements IDeleteFoodEntryRequest {
    foodItemIds?: string[] | undefined;

    constructor(data?: IDeleteFoodEntryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["foodItemIds"])) {
                this.foodItemIds = [] as any;
                for (let item of _data["foodItemIds"])
                    this.foodItemIds!.push(item);
            }
        }
    }

    static fromJS(data: any): DeleteFoodEntryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFoodEntryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.foodItemIds)) {
            data["foodItemIds"] = [];
            for (let item of this.foodItemIds)
                data["foodItemIds"].push(item);
        }
        return data;
    }
}

export interface IDeleteFoodEntryRequest {
    foodItemIds?: string[] | undefined;
}

export class DeleteFoodEntryResponse implements IDeleteFoodEntryResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;

    constructor(data?: IDeleteFoodEntryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
        }
    }

    static fromJS(data: any): DeleteFoodEntryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFoodEntryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        return data;
    }
}

export interface IDeleteFoodEntryResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
}

export class EditFoodSelectionRequest implements IEditFoodSelectionRequest {
    foodEntryId!: string;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    localDateKey?: string | undefined;

    constructor(data?: IEditFoodSelectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.foodEntryId = _data["foodEntryId"];
            this.groupId = _data["groupId"];
            this.itemSetId = _data["itemSetId"];
            this.localDateKey = _data["localDateKey"];
        }
    }

    static fromJS(data: any): EditFoodSelectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditFoodSelectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["foodEntryId"] = this.foodEntryId;
        data["groupId"] = this.groupId;
        data["itemSetId"] = this.itemSetId;
        data["localDateKey"] = this.localDateKey;
        return data;
    }
}

export interface IEditFoodSelectionRequest {
    foodEntryId: string;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    localDateKey?: string | undefined;
}

export enum EditFoodSelectionType {
    UpdateServing = "UpdateServing",
    UpdateParentQuantity = "UpdateParentQuantity",
    RemoveComponent = "RemoveComponent",
    RemoveFood = "RemoveFood",
}

export class ErrorDto implements IErrorDto {
    errorMessage?: string | undefined;
    errorCode?: string | undefined;

    constructor(data?: IErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorMessage = _data["errorMessage"];
            this.errorCode = _data["errorCode"];
        }
    }

    static fromJS(data: any): ErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorMessage"] = this.errorMessage;
        data["errorCode"] = this.errorCode;
        return data;
    }
}

export interface IErrorDto {
    errorMessage?: string | undefined;
    errorCode?: string | undefined;
}

export class EstimateUnitConversionsRequest implements IEstimateUnitConversionsRequest {
    componentId?: string | undefined;
    foodDisplayName?: string | undefined;
    brandName?: string | undefined;
    servingId?: string | undefined;
    servingDescription?: string | undefined;
    numberOfUnits?: number;
    measurementDescription?: string | undefined;
    metricServingAmount?: number | undefined;
    metricServingUnit?: string | undefined;
    targetUnits?: string[] | undefined;

    constructor(data?: IEstimateUnitConversionsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.componentId = _data["componentId"];
            this.foodDisplayName = _data["foodDisplayName"];
            this.brandName = _data["brandName"];
            this.servingId = _data["servingId"];
            this.servingDescription = _data["servingDescription"];
            this.numberOfUnits = _data["numberOfUnits"];
            this.measurementDescription = _data["measurementDescription"];
            this.metricServingAmount = _data["metricServingAmount"];
            this.metricServingUnit = _data["metricServingUnit"];
            if (Array.isArray(_data["targetUnits"])) {
                this.targetUnits = [] as any;
                for (let item of _data["targetUnits"])
                    this.targetUnits!.push(item);
            }
        }
    }

    static fromJS(data: any): EstimateUnitConversionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EstimateUnitConversionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["componentId"] = this.componentId;
        data["foodDisplayName"] = this.foodDisplayName;
        data["brandName"] = this.brandName;
        data["servingId"] = this.servingId;
        data["servingDescription"] = this.servingDescription;
        data["numberOfUnits"] = this.numberOfUnits;
        data["measurementDescription"] = this.measurementDescription;
        data["metricServingAmount"] = this.metricServingAmount;
        data["metricServingUnit"] = this.metricServingUnit;
        if (Array.isArray(this.targetUnits)) {
            data["targetUnits"] = [];
            for (let item of this.targetUnits)
                data["targetUnits"].push(item);
        }
        return data;
    }
}

export interface IEstimateUnitConversionsRequest {
    componentId?: string | undefined;
    foodDisplayName?: string | undefined;
    brandName?: string | undefined;
    servingId?: string | undefined;
    servingDescription?: string | undefined;
    numberOfUnits?: number;
    measurementDescription?: string | undefined;
    metricServingAmount?: number | undefined;
    metricServingUnit?: string | undefined;
    targetUnits?: string[] | undefined;
}

export class EstimateUnitConversionsResponse implements IEstimateUnitConversionsResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    componentId?: string | undefined;
    foodDisplayName?: string | undefined;
    estimates?: EstimatedUnit[] | undefined;

    constructor(data?: IEstimateUnitConversionsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.componentId = _data["componentId"];
            this.foodDisplayName = _data["foodDisplayName"];
            if (Array.isArray(_data["estimates"])) {
                this.estimates = [] as any;
                for (let item of _data["estimates"])
                    this.estimates!.push(EstimatedUnit.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EstimateUnitConversionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EstimateUnitConversionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["componentId"] = this.componentId;
        data["foodDisplayName"] = this.foodDisplayName;
        if (Array.isArray(this.estimates)) {
            data["estimates"] = [];
            for (let item of this.estimates)
                data["estimates"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEstimateUnitConversionsResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    componentId?: string | undefined;
    foodDisplayName?: string | undefined;
    estimates?: EstimatedUnit[] | undefined;
}

export class EstimatedUnit implements IEstimatedUnit {
    unit?: string | undefined;
    gramsPerUnit?: number;
    confidence?: number;
    note?: string | undefined;

    constructor(data?: IEstimatedUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unit = _data["unit"];
            this.gramsPerUnit = _data["gramsPerUnit"];
            this.confidence = _data["confidence"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): EstimatedUnit {
        data = typeof data === 'object' ? data : {};
        let result = new EstimatedUnit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unit"] = this.unit;
        data["gramsPerUnit"] = this.gramsPerUnit;
        data["confidence"] = this.confidence;
        data["note"] = this.note;
        return data;
    }
}

export interface IEstimatedUnit {
    unit?: string | undefined;
    gramsPerUnit?: number;
    confidence?: number;
    note?: string | undefined;
}

export class FeedbackEntry implements IFeedbackEntry {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    feedbackType?: string | undefined;
    message?: string | undefined;
    clientContext?: TelemetryContext;
    serverContext?: TelemetryContext;
    isCompleted?: boolean;
    completedDateUtc?: Date | undefined;
    completionNote?: string | undefined;
    completedByAccountId?: string | undefined;
    isAssistantResponseShown?: boolean;
    assistantResponseShownDateUtc?: Date | undefined;

    constructor(data?: IFeedbackEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            this.lastUpdatedDateUtc = _data["lastUpdatedDateUtc"] ? new Date(_data["lastUpdatedDateUtc"].toString()) : <any>undefined;
            this.accountId = _data["accountId"];
            this.feedbackType = _data["feedbackType"];
            this.message = _data["message"];
            this.clientContext = _data["clientContext"] ? TelemetryContext.fromJS(_data["clientContext"]) : <any>undefined;
            this.serverContext = _data["serverContext"] ? TelemetryContext.fromJS(_data["serverContext"]) : <any>undefined;
            this.isCompleted = _data["isCompleted"];
            this.completedDateUtc = _data["completedDateUtc"] ? new Date(_data["completedDateUtc"].toString()) : <any>undefined;
            this.completionNote = _data["completionNote"];
            this.completedByAccountId = _data["completedByAccountId"];
            this.isAssistantResponseShown = _data["isAssistantResponseShown"];
            this.assistantResponseShownDateUtc = _data["assistantResponseShownDateUtc"] ? new Date(_data["assistantResponseShownDateUtc"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FeedbackEntry {
        data = typeof data === 'object' ? data : {};
        let result = new FeedbackEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        data["lastUpdatedDateUtc"] = this.lastUpdatedDateUtc ? this.lastUpdatedDateUtc.toISOString() : <any>undefined;
        data["accountId"] = this.accountId;
        data["feedbackType"] = this.feedbackType;
        data["message"] = this.message;
        data["clientContext"] = this.clientContext ? this.clientContext.toJSON() : <any>undefined;
        data["serverContext"] = this.serverContext ? this.serverContext.toJSON() : <any>undefined;
        data["isCompleted"] = this.isCompleted;
        data["completedDateUtc"] = this.completedDateUtc ? this.completedDateUtc.toISOString() : <any>undefined;
        data["completionNote"] = this.completionNote;
        data["completedByAccountId"] = this.completedByAccountId;
        data["isAssistantResponseShown"] = this.isAssistantResponseShown;
        data["assistantResponseShownDateUtc"] = this.assistantResponseShownDateUtc ? this.assistantResponseShownDateUtc.toISOString() : <any>undefined;
        return data;
    }
}

export interface IFeedbackEntry {
    id?: string | undefined;
    createdDateUtc?: Date;
    lastUpdatedDateUtc?: Date;
    accountId?: string | undefined;
    feedbackType?: string | undefined;
    message?: string | undefined;
    clientContext?: TelemetryContext;
    serverContext?: TelemetryContext;
    isCompleted?: boolean;
    completedDateUtc?: Date | undefined;
    completionNote?: string | undefined;
    completedByAccountId?: string | undefined;
    isAssistantResponseShown?: boolean;
    assistantResponseShownDateUtc?: Date | undefined;
}

export class FeedbackWithAccount implements IFeedbackWithAccount {
    feedback?: FeedbackEntry;
    accountEmail?: string | undefined;
    accountId?: string | undefined;
    accountCreatedDate?: Date | undefined;

    constructor(data?: IFeedbackWithAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedback = _data["feedback"] ? FeedbackEntry.fromJS(_data["feedback"]) : <any>undefined;
            this.accountEmail = _data["accountEmail"];
            this.accountId = _data["accountId"];
            this.accountCreatedDate = _data["accountCreatedDate"] ? new Date(_data["accountCreatedDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FeedbackWithAccount {
        data = typeof data === 'object' ? data : {};
        let result = new FeedbackWithAccount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedback"] = this.feedback ? this.feedback.toJSON() : <any>undefined;
        data["accountEmail"] = this.accountEmail;
        data["accountId"] = this.accountId;
        data["accountCreatedDate"] = this.accountCreatedDate ? this.accountCreatedDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IFeedbackWithAccount {
    feedback?: FeedbackEntry;
    accountEmail?: string | undefined;
    accountId?: string | undefined;
    accountCreatedDate?: Date | undefined;
}

export class Food implements IFood {
    id?: string | undefined;
    name?: string | undefined;
    quantity?: number;
    unit?: string | undefined;
    description?: string | undefined;
    brand?: string | undefined;
    originalPhrase?: string | undefined;
    components?: Component[] | undefined;

    constructor(data?: IFood) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.quantity = _data["quantity"];
            this.unit = _data["unit"];
            this.description = _data["description"];
            this.brand = _data["brand"];
            this.originalPhrase = _data["originalPhrase"];
            if (Array.isArray(_data["components"])) {
                this.components = [] as any;
                for (let item of _data["components"])
                    this.components!.push(Component.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Food {
        data = typeof data === 'object' ? data : {};
        let result = new Food();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["quantity"] = this.quantity;
        data["unit"] = this.unit;
        data["description"] = this.description;
        data["brand"] = this.brand;
        data["originalPhrase"] = this.originalPhrase;
        if (Array.isArray(this.components)) {
            data["components"] = [];
            for (let item of this.components)
                data["components"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFood {
    id?: string | undefined;
    name?: string | undefined;
    quantity?: number;
    unit?: string | undefined;
    description?: string | undefined;
    brand?: string | undefined;
    originalPhrase?: string | undefined;
    components?: Component[] | undefined;
}

export class FoodBreakdown implements IFoodBreakdown {
    foodItemIds?: string[] | undefined;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    totalAmount?: number;
    unit?: string | undefined;
    nutrients?: NutrientContribution[] | undefined;
    components?: ComponentBreakdown[] | undefined;
    componentCount?: number;

    constructor(data?: IFoodBreakdown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["foodItemIds"])) {
                this.foodItemIds = [] as any;
                for (let item of _data["foodItemIds"])
                    this.foodItemIds!.push(item);
            }
            this.foodEntryId = _data["foodEntryId"];
            this.groupId = _data["groupId"];
            this.itemSetId = _data["itemSetId"];
            this.name = _data["name"];
            this.brandName = _data["brandName"];
            this.totalAmount = _data["totalAmount"];
            this.unit = _data["unit"];
            if (Array.isArray(_data["nutrients"])) {
                this.nutrients = [] as any;
                for (let item of _data["nutrients"])
                    this.nutrients!.push(NutrientContribution.fromJS(item));
            }
            if (Array.isArray(_data["components"])) {
                this.components = [] as any;
                for (let item of _data["components"])
                    this.components!.push(ComponentBreakdown.fromJS(item));
            }
            this.componentCount = _data["componentCount"];
        }
    }

    static fromJS(data: any): FoodBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new FoodBreakdown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.foodItemIds)) {
            data["foodItemIds"] = [];
            for (let item of this.foodItemIds)
                data["foodItemIds"].push(item);
        }
        data["foodEntryId"] = this.foodEntryId;
        data["groupId"] = this.groupId;
        data["itemSetId"] = this.itemSetId;
        data["name"] = this.name;
        data["brandName"] = this.brandName;
        data["totalAmount"] = this.totalAmount;
        data["unit"] = this.unit;
        if (Array.isArray(this.nutrients)) {
            data["nutrients"] = [];
            for (let item of this.nutrients)
                data["nutrients"].push(item.toJSON());
        }
        if (Array.isArray(this.components)) {
            data["components"] = [];
            for (let item of this.components)
                data["components"].push(item.toJSON());
        }
        data["componentCount"] = this.componentCount;
        return data;
    }
}

export interface IFoodBreakdown {
    foodItemIds?: string[] | undefined;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    totalAmount?: number;
    unit?: string | undefined;
    nutrients?: NutrientContribution[] | undefined;
    components?: ComponentBreakdown[] | undefined;
    componentCount?: number;
}

export class FoodContribution implements IFoodContribution {
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    foodUnit?: string | undefined;
    displayQuantity?: number;
    foodEntryId?: string | undefined;
    foodId?: string | undefined;
    componentId?: string | undefined;

    constructor(data?: IFoodContribution) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.brandName = _data["brandName"];
            this.amount = _data["amount"];
            this.unit = _data["unit"];
            this.foodUnit = _data["foodUnit"];
            this.displayQuantity = _data["displayQuantity"];
            this.foodEntryId = _data["foodEntryId"];
            this.foodId = _data["foodId"];
            this.componentId = _data["componentId"];
        }
    }

    static fromJS(data: any): FoodContribution {
        data = typeof data === 'object' ? data : {};
        let result = new FoodContribution();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["brandName"] = this.brandName;
        data["amount"] = this.amount;
        data["unit"] = this.unit;
        data["foodUnit"] = this.foodUnit;
        data["displayQuantity"] = this.displayQuantity;
        data["foodEntryId"] = this.foodEntryId;
        data["foodId"] = this.foodId;
        data["componentId"] = this.componentId;
        return data;
    }
}

export interface IFoodContribution {
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    foodUnit?: string | undefined;
    displayQuantity?: number;
    foodEntryId?: string | undefined;
    foodId?: string | undefined;
    componentId?: string | undefined;
}

export class FoodEntryBreakdown implements IFoodEntryBreakdown {
    foodEntryId?: string | undefined;
    entryName?: string | undefined;
    localDateKey?: string | undefined;
    createdDateUtc?: Date;
    foods?: FoodBreakdown[] | undefined;

    constructor(data?: IFoodEntryBreakdown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.foodEntryId = _data["foodEntryId"];
            this.entryName = _data["entryName"];
            this.localDateKey = _data["localDateKey"];
            this.createdDateUtc = _data["createdDateUtc"] ? new Date(_data["createdDateUtc"].toString()) : <any>undefined;
            if (Array.isArray(_data["foods"])) {
                this.foods = [] as any;
                for (let item of _data["foods"])
                    this.foods!.push(FoodBreakdown.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FoodEntryBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new FoodEntryBreakdown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["foodEntryId"] = this.foodEntryId;
        data["entryName"] = this.entryName;
        data["localDateKey"] = this.localDateKey;
        data["createdDateUtc"] = this.createdDateUtc ? this.createdDateUtc.toISOString() : <any>undefined;
        if (Array.isArray(this.foods)) {
            data["foods"] = [];
            for (let item of this.foods)
                data["foods"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFoodEntryBreakdown {
    foodEntryId?: string | undefined;
    entryName?: string | undefined;
    localDateKey?: string | undefined;
    createdDateUtc?: Date;
    foods?: FoodBreakdown[] | undefined;
}

export class GetAccountDataCountsRequest implements IGetAccountDataCountsRequest {
    accountId?: string | undefined;

    constructor(data?: IGetAccountDataCountsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
        }
    }

    static fromJS(data: any): GetAccountDataCountsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetAccountDataCountsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        return data;
    }
}

export interface IGetAccountDataCountsRequest {
    accountId?: string | undefined;
}

export class GetAccountDataCountsResponse implements IGetAccountDataCountsResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    dataCounts?: { [key: string]: number; } | undefined;
    totalDataCount?: number;

    constructor(data?: IGetAccountDataCountsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (_data["dataCounts"]) {
                this.dataCounts = {} as any;
                for (let key in _data["dataCounts"]) {
                    if (_data["dataCounts"].hasOwnProperty(key))
                        (<any>this.dataCounts)![key] = _data["dataCounts"][key];
                }
            }
            this.totalDataCount = _data["totalDataCount"];
        }
    }

    static fromJS(data: any): GetAccountDataCountsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetAccountDataCountsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (this.dataCounts) {
            data["dataCounts"] = {};
            for (let key in this.dataCounts) {
                if (this.dataCounts.hasOwnProperty(key))
                    (<any>data["dataCounts"])[key] = (<any>this.dataCounts)[key];
            }
        }
        data["totalDataCount"] = this.totalDataCount;
        return data;
    }
}

export interface IGetAccountDataCountsResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    dataCounts?: { [key: string]: number; } | undefined;
    totalDataCount?: number;
}

export class GetAllAccountsRequest implements IGetAllAccountsRequest {

    constructor(data?: IGetAllAccountsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetAllAccountsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllAccountsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IGetAllAccountsRequest {
}

export class GetAllAccountsResponse implements IGetAllAccountsResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    accounts?: Account[] | undefined;

    constructor(data?: IGetAllAccountsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["accounts"])) {
                this.accounts = [] as any;
                for (let item of _data["accounts"])
                    this.accounts!.push(Account.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllAccountsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllAccountsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.accounts)) {
            data["accounts"] = [];
            for (let item of this.accounts)
                data["accounts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetAllAccountsResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    accounts?: Account[] | undefined;
}

export class GetChatMessagesRequest implements IGetChatMessagesRequest {
    localDateKey!: string;

    constructor(data?: IGetChatMessagesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localDateKey = _data["localDateKey"];
        }
    }

    static fromJS(data: any): GetChatMessagesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetChatMessagesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localDateKey"] = this.localDateKey;
        return data;
    }
}

export interface IGetChatMessagesRequest {
    localDateKey: string;
}

export class GetDetailedSummaryRequest implements IGetDetailedSummaryRequest {
    localDateKey?: string | undefined;

    constructor(data?: IGetDetailedSummaryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localDateKey = _data["localDateKey"];
        }
    }

    static fromJS(data: any): GetDetailedSummaryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetDetailedSummaryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localDateKey"] = this.localDateKey;
        return data;
    }
}

export interface IGetDetailedSummaryRequest {
    localDateKey?: string | undefined;
}

export class GetDetailedSummaryResponse implements IGetDetailedSummaryResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    dailySummary?: DailySummary;

    constructor(data?: IGetDetailedSummaryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.dailySummary = _data["dailySummary"] ? DailySummary.fromJS(_data["dailySummary"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetDetailedSummaryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDetailedSummaryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["dailySummary"] = this.dailySummary ? this.dailySummary.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetDetailedSummaryResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    dailySummary?: DailySummary;
}

export class GetFeedbackWithAccountInfoRequest implements IGetFeedbackWithAccountInfoRequest {
    feedbackType?: string | undefined;
    accountId?: string | undefined;
    completedOnly?: boolean;
    incompleteOnly?: boolean;
    accountEmail?: string | undefined;

    constructor(data?: IGetFeedbackWithAccountInfoRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.feedbackType = _data["feedbackType"];
            this.accountId = _data["accountId"];
            this.completedOnly = _data["completedOnly"];
            this.incompleteOnly = _data["incompleteOnly"];
            this.accountEmail = _data["accountEmail"];
        }
    }

    static fromJS(data: any): GetFeedbackWithAccountInfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetFeedbackWithAccountInfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedbackType"] = this.feedbackType;
        data["accountId"] = this.accountId;
        data["completedOnly"] = this.completedOnly;
        data["incompleteOnly"] = this.incompleteOnly;
        data["accountEmail"] = this.accountEmail;
        return data;
    }
}

export interface IGetFeedbackWithAccountInfoRequest {
    feedbackType?: string | undefined;
    accountId?: string | undefined;
    completedOnly?: boolean;
    incompleteOnly?: boolean;
    accountEmail?: string | undefined;
}

export class GetFeedbackWithAccountInfoResponse implements IGetFeedbackWithAccountInfoResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackWithAccounts?: FeedbackWithAccount[] | undefined;

    constructor(data?: IGetFeedbackWithAccountInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["feedbackWithAccounts"])) {
                this.feedbackWithAccounts = [] as any;
                for (let item of _data["feedbackWithAccounts"])
                    this.feedbackWithAccounts!.push(FeedbackWithAccount.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFeedbackWithAccountInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetFeedbackWithAccountInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.feedbackWithAccounts)) {
            data["feedbackWithAccounts"] = [];
            for (let item of this.feedbackWithAccounts)
                data["feedbackWithAccounts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFeedbackWithAccountInfoResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    feedbackWithAccounts?: FeedbackWithAccount[] | undefined;
}

export class GetUserChatMessagesRequest implements IGetUserChatMessagesRequest {
    accountId?: string | undefined;
    localDateKey?: string | undefined;
    limit?: number | undefined;

    constructor(data?: IGetUserChatMessagesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.localDateKey = _data["localDateKey"];
            this.limit = _data["limit"];
        }
    }

    static fromJS(data: any): GetUserChatMessagesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserChatMessagesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["localDateKey"] = this.localDateKey;
        data["limit"] = this.limit;
        return data;
    }
}

export interface IGetUserChatMessagesRequest {
    accountId?: string | undefined;
    localDateKey?: string | undefined;
    limit?: number | undefined;
}

export class GetUserChatMessagesResponse implements IGetUserChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    messages?: ChatMessage[] | undefined;
    accountId?: string | undefined;
    accountEmail?: string | undefined;

    constructor(data?: IGetUserChatMessagesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ChatMessage.fromJS(item));
            }
            this.accountId = _data["accountId"];
            this.accountEmail = _data["accountEmail"];
        }
    }

    static fromJS(data: any): GetUserChatMessagesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserChatMessagesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        data["accountId"] = this.accountId;
        data["accountEmail"] = this.accountEmail;
        return data;
    }
}

export interface IGetUserChatMessagesResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    messages?: ChatMessage[] | undefined;
    accountId?: string | undefined;
    accountEmail?: string | undefined;
}

export class LearnMoreAboutRequest implements ILearnMoreAboutRequest {
    topic?: string | undefined;
    localDateKey?: string | undefined;

    constructor(data?: ILearnMoreAboutRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.topic = _data["topic"];
            this.localDateKey = _data["localDateKey"];
        }
    }

    static fromJS(data: any): LearnMoreAboutRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LearnMoreAboutRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["topic"] = this.topic;
        data["localDateKey"] = this.localDateKey;
        return data;
    }
}

export interface ILearnMoreAboutRequest {
    topic?: string | undefined;
    localDateKey?: string | undefined;
}

export class LogEntryDto implements ILogEntryDto {
    timestampUtc?: Date;
    severity?: string | undefined;
    message?: string | undefined;
    accountId?: string | undefined;
    email?: string | undefined;
    traceId?: string | undefined;
    sourceService?: string | undefined;
    extra?: { [key: string]: string; } | undefined;

    constructor(data?: ILogEntryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timestampUtc = _data["timestampUtc"] ? new Date(_data["timestampUtc"].toString()) : <any>undefined;
            this.severity = _data["severity"];
            this.message = _data["message"];
            this.accountId = _data["accountId"];
            this.email = _data["email"];
            this.traceId = _data["traceId"];
            this.sourceService = _data["sourceService"];
            if (_data["extra"]) {
                this.extra = {} as any;
                for (let key in _data["extra"]) {
                    if (_data["extra"].hasOwnProperty(key))
                        (<any>this.extra)![key] = _data["extra"][key];
                }
            }
        }
    }

    static fromJS(data: any): LogEntryDto {
        data = typeof data === 'object' ? data : {};
        let result = new LogEntryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timestampUtc"] = this.timestampUtc ? this.timestampUtc.toISOString() : <any>undefined;
        data["severity"] = this.severity;
        data["message"] = this.message;
        data["accountId"] = this.accountId;
        data["email"] = this.email;
        data["traceId"] = this.traceId;
        data["sourceService"] = this.sourceService;
        if (this.extra) {
            data["extra"] = {};
            for (let key in this.extra) {
                if (this.extra.hasOwnProperty(key))
                    (<any>data["extra"])[key] = (<any>this.extra)[key];
            }
        }
        return data;
    }
}

export interface ILogEntryDto {
    timestampUtc?: Date;
    severity?: string | undefined;
    message?: string | undefined;
    accountId?: string | undefined;
    email?: string | undefined;
    traceId?: string | undefined;
    sourceService?: string | undefined;
    extra?: { [key: string]: string; } | undefined;
}

export class LogMealToolResponse implements ILogMealToolResponse {
    mealName?: string | undefined;
    pendingMessageId?: string | undefined;
    foods?: Food[] | undefined;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;

    constructor(data?: ILogMealToolResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mealName = _data["mealName"];
            this.pendingMessageId = _data["pendingMessageId"];
            if (Array.isArray(_data["foods"])) {
                this.foods = [] as any;
                for (let item of _data["foods"])
                    this.foods!.push(Food.fromJS(item));
            }
            this.foodEntryId = _data["foodEntryId"];
            this.groupId = _data["groupId"];
            this.itemSetId = _data["itemSetId"];
        }
    }

    static fromJS(data: any): LogMealToolResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LogMealToolResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mealName"] = this.mealName;
        data["pendingMessageId"] = this.pendingMessageId;
        if (Array.isArray(this.foods)) {
            data["foods"] = [];
            for (let item of this.foods)
                data["foods"].push(item.toJSON());
        }
        data["foodEntryId"] = this.foodEntryId;
        data["groupId"] = this.groupId;
        data["itemSetId"] = this.itemSetId;
        return data;
    }
}

export interface ILogMealToolResponse {
    mealName?: string | undefined;
    pendingMessageId?: string | undefined;
    foods?: Food[] | undefined;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
}

export enum MessageRoleTypes {
    User = "User",
    Assistant = "Assistant",
    Tool = "Tool",
    System = "System",
    ContextNote = "ContextNote",
    PendingFoodSelection = "PendingFoodSelection",
    CompletedFoodSelection = "CompletedFoodSelection",
    CanceledFoodSelection = "CanceledFoodSelection",
    PendingEditFoodSelection = "PendingEditFoodSelection",
    CompletedEditFoodSelection = "CompletedEditFoodSelection",
}

export class NutrientBreakdown implements INutrientBreakdown {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    unit?: string | undefined;
    totalAmount?: number;
    minTarget?: number | undefined;
    maxTarget?: number | undefined;
    isGoal?: boolean;
    sortOrder?: number;
    readonly percentOfTarget?: number | undefined;
    foods?: FoodContribution[] | undefined;

    constructor(data?: INutrientBreakdown) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nutrientKey = _data["nutrientKey"];
            this.nutrientName = _data["nutrientName"];
            this.unit = _data["unit"];
            this.totalAmount = _data["totalAmount"];
            this.minTarget = _data["minTarget"];
            this.maxTarget = _data["maxTarget"];
            this.isGoal = _data["isGoal"];
            this.sortOrder = _data["sortOrder"];
            (<any>this).percentOfTarget = _data["percentOfTarget"];
            if (Array.isArray(_data["foods"])) {
                this.foods = [] as any;
                for (let item of _data["foods"])
                    this.foods!.push(FoodContribution.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NutrientBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new NutrientBreakdown();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nutrientKey"] = this.nutrientKey;
        data["nutrientName"] = this.nutrientName;
        data["unit"] = this.unit;
        data["totalAmount"] = this.totalAmount;
        data["minTarget"] = this.minTarget;
        data["maxTarget"] = this.maxTarget;
        data["isGoal"] = this.isGoal;
        data["sortOrder"] = this.sortOrder;
        data["percentOfTarget"] = this.percentOfTarget;
        if (Array.isArray(this.foods)) {
            data["foods"] = [];
            for (let item of this.foods)
                data["foods"].push(item.toJSON());
        }
        return data;
    }
}

export interface INutrientBreakdown {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    unit?: string | undefined;
    totalAmount?: number;
    minTarget?: number | undefined;
    maxTarget?: number | undefined;
    isGoal?: boolean;
    sortOrder?: number;
    percentOfTarget?: number | undefined;
    foods?: FoodContribution[] | undefined;
}

export class NutrientContribution implements INutrientContribution {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    originalUnit?: string | undefined;

    constructor(data?: INutrientContribution) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nutrientKey = _data["nutrientKey"];
            this.nutrientName = _data["nutrientName"];
            this.name = _data["name"];
            this.brandName = _data["brandName"];
            this.amount = _data["amount"];
            this.unit = _data["unit"];
            this.originalUnit = _data["originalUnit"];
        }
    }

    static fromJS(data: any): NutrientContribution {
        data = typeof data === 'object' ? data : {};
        let result = new NutrientContribution();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nutrientKey"] = this.nutrientKey;
        data["nutrientName"] = this.nutrientName;
        data["name"] = this.name;
        data["brandName"] = this.brandName;
        data["amount"] = this.amount;
        data["unit"] = this.unit;
        data["originalUnit"] = this.originalUnit;
        return data;
    }
}

export interface INutrientContribution {
    nutrientKey?: string | undefined;
    nutrientName?: string | undefined;
    name?: string | undefined;
    brandName?: string | undefined;
    amount?: number;
    unit?: string | undefined;
    originalUnit?: string | undefined;
}

export class RegisterAccountRequest implements IRegisterAccountRequest {
    email?: string | undefined;
    timeZoneId?: string | undefined;
    isAnonymous?: boolean;

    constructor(data?: IRegisterAccountRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.timeZoneId = _data["timeZoneId"];
            this.isAnonymous = _data["isAnonymous"];
        }
    }

    static fromJS(data: any): RegisterAccountRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterAccountRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["timeZoneId"] = this.timeZoneId;
        data["isAnonymous"] = this.isAnonymous;
        return data;
    }
}

export interface IRegisterAccountRequest {
    email?: string | undefined;
    timeZoneId?: string | undefined;
    isAnonymous?: boolean;
}

export class Request implements IRequest {

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IRequest {
}

export class Response implements IResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;

    constructor(data?: IResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
        }
    }

    static fromJS(data: any): Response {
        data = typeof data === 'object' ? data : {};
        let result = new Response();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        return data;
    }
}

export interface IResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
}

export class RunChatRequest implements IRunChatRequest {
    message?: string | undefined;
    localDateKey?: string | undefined;

    constructor(data?: IRunChatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.localDateKey = _data["localDateKey"];
        }
    }

    static fromJS(data: any): RunChatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RunChatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["localDateKey"] = this.localDateKey;
        return data;
    }
}

export interface IRunChatRequest {
    message?: string | undefined;
    localDateKey?: string | undefined;
}

export class SearchFoodPhraseRequest implements ISearchFoodPhraseRequest {
    searchPhrase?: string | undefined;
    localDateKey?: string | undefined;
    originalPhrase?: string | undefined;
    messageId?: string | undefined;
    componentId?: string | undefined;

    constructor(data?: ISearchFoodPhraseRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.searchPhrase = _data["searchPhrase"];
            this.localDateKey = _data["localDateKey"];
            this.originalPhrase = _data["originalPhrase"];
            this.messageId = _data["messageId"];
            this.componentId = _data["componentId"];
        }
    }

    static fromJS(data: any): SearchFoodPhraseRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SearchFoodPhraseRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchPhrase"] = this.searchPhrase;
        data["localDateKey"] = this.localDateKey;
        data["originalPhrase"] = this.originalPhrase;
        data["messageId"] = this.messageId;
        data["componentId"] = this.componentId;
        return data;
    }
}

export interface ISearchFoodPhraseRequest {
    searchPhrase?: string | undefined;
    localDateKey?: string | undefined;
    originalPhrase?: string | undefined;
    messageId?: string | undefined;
    componentId?: string | undefined;
}

export class SearchFoodPhraseResponse implements ISearchFoodPhraseResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    searchPhrase?: string | undefined;
    foodOptions?: Food[] | undefined;
    mealName?: string | undefined;
    updatedMessage?: ChatMessage;

    constructor(data?: ISearchFoodPhraseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            this.searchPhrase = _data["searchPhrase"];
            if (Array.isArray(_data["foodOptions"])) {
                this.foodOptions = [] as any;
                for (let item of _data["foodOptions"])
                    this.foodOptions!.push(Food.fromJS(item));
            }
            this.mealName = _data["mealName"];
            this.updatedMessage = _data["updatedMessage"] ? ChatMessage.fromJS(_data["updatedMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchFoodPhraseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SearchFoodPhraseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        data["searchPhrase"] = this.searchPhrase;
        if (Array.isArray(this.foodOptions)) {
            data["foodOptions"] = [];
            for (let item of this.foodOptions)
                data["foodOptions"].push(item.toJSON());
        }
        data["mealName"] = this.mealName;
        data["updatedMessage"] = this.updatedMessage ? this.updatedMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISearchFoodPhraseResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    searchPhrase?: string | undefined;
    foodOptions?: Food[] | undefined;
    mealName?: string | undefined;
    updatedMessage?: ChatMessage;
}

export class SearchLogsRequest implements ISearchLogsRequest {
    accountId?: string | undefined;
    email?: string | undefined;
    contains?: string | undefined;
    severity?: string | undefined;
    traceId?: string | undefined;
    minutesBack?: number | undefined;
    pageSize?: number | undefined;
    pageToken?: string | undefined;

    constructor(data?: ISearchLogsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountId = _data["accountId"];
            this.email = _data["email"];
            this.contains = _data["contains"];
            this.severity = _data["severity"];
            this.traceId = _data["traceId"];
            this.minutesBack = _data["minutesBack"];
            this.pageSize = _data["pageSize"];
            this.pageToken = _data["pageToken"];
        }
    }

    static fromJS(data: any): SearchLogsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SearchLogsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountId"] = this.accountId;
        data["email"] = this.email;
        data["contains"] = this.contains;
        data["severity"] = this.severity;
        data["traceId"] = this.traceId;
        data["minutesBack"] = this.minutesBack;
        data["pageSize"] = this.pageSize;
        data["pageToken"] = this.pageToken;
        return data;
    }
}

export interface ISearchLogsRequest {
    accountId?: string | undefined;
    email?: string | undefined;
    contains?: string | undefined;
    severity?: string | undefined;
    traceId?: string | undefined;
    minutesBack?: number | undefined;
    pageSize?: number | undefined;
    pageToken?: string | undefined;
}

export class SearchLogsResponse implements ISearchLogsResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    items?: LogEntryDto[] | undefined;
    nextPageToken?: string | undefined;

    constructor(data?: ISearchLogsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.correlationId = _data["correlationId"];
            this.stackTrace = _data["stackTrace"];
            this.accountId = _data["accountId"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LogEntryDto.fromJS(item));
            }
            this.nextPageToken = _data["nextPageToken"];
        }
    }

    static fromJS(data: any): SearchLogsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SearchLogsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["isSuccess"] = this.isSuccess;
        data["correlationId"] = this.correlationId;
        data["stackTrace"] = this.stackTrace;
        data["accountId"] = this.accountId;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["nextPageToken"] = this.nextPageToken;
        return data;
    }
}

export interface ISearchLogsResponse {
    errors?: ErrorDto[] | undefined;
    isSuccess?: boolean;
    correlationId?: string | undefined;
    stackTrace?: string | undefined;
    accountId?: string | undefined;
    items?: LogEntryDto[] | undefined;
    nextPageToken?: string | undefined;
}

export class SubmitEditServingSelectionRequest implements ISubmitEditServingSelectionRequest {
    pendingMessageId!: string;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    localDateKey?: string | undefined;
    operations?: UserEditOperation[] | undefined;

    constructor(data?: ISubmitEditServingSelectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pendingMessageId = _data["pendingMessageId"];
            this.foodEntryId = _data["foodEntryId"];
            this.groupId = _data["groupId"];
            this.itemSetId = _data["itemSetId"];
            this.localDateKey = _data["localDateKey"];
            if (Array.isArray(_data["operations"])) {
                this.operations = [] as any;
                for (let item of _data["operations"])
                    this.operations!.push(UserEditOperation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubmitEditServingSelectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitEditServingSelectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pendingMessageId"] = this.pendingMessageId;
        data["foodEntryId"] = this.foodEntryId;
        data["groupId"] = this.groupId;
        data["itemSetId"] = this.itemSetId;
        data["localDateKey"] = this.localDateKey;
        if (Array.isArray(this.operations)) {
            data["operations"] = [];
            for (let item of this.operations)
                data["operations"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISubmitEditServingSelectionRequest {
    pendingMessageId: string;
    foodEntryId?: string | undefined;
    groupId?: string | undefined;
    itemSetId?: string | undefined;
    localDateKey?: string | undefined;
    operations?: UserEditOperation[] | undefined;
}

export class SubmitServingSelectionRequest implements ISubmitServingSelectionRequest {
    localDateKey?: string | undefined;
    pendingMessageId?: string | undefined;
    selections?: UserSelectedServing[] | undefined;

    constructor(data?: ISubmitServingSelectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localDateKey = _data["localDateKey"];
            this.pendingMessageId = _data["pendingMessageId"];
            if (Array.isArray(_data["selections"])) {
                this.selections = [] as any;
                for (let item of _data["selections"])
                    this.selections!.push(UserSelectedServing.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubmitServingSelectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitServingSelectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localDateKey"] = this.localDateKey;
        data["pendingMessageId"] = this.pendingMessageId;
        if (Array.isArray(this.selections)) {
            data["selections"] = [];
            for (let item of this.selections)
                data["selections"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISubmitServingSelectionRequest {
    localDateKey?: string | undefined;
    pendingMessageId?: string | undefined;
    selections?: UserSelectedServing[] | undefined;
}

export class TelemetryContext implements ITelemetryContext {
    buildStamp?: BuildStamp;
    environment?: string | undefined;
    userAgent?: string | undefined;
    extras?: { [key: string]: string; } | undefined;

    constructor(data?: ITelemetryContext) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.buildStamp = _data["buildStamp"] ? BuildStamp.fromJS(_data["buildStamp"]) : <any>undefined;
            this.environment = _data["environment"];
            this.userAgent = _data["userAgent"];
            if (_data["extras"]) {
                this.extras = {} as any;
                for (let key in _data["extras"]) {
                    if (_data["extras"].hasOwnProperty(key))
                        (<any>this.extras)![key] = _data["extras"][key];
                }
            }
        }
    }

    static fromJS(data: any): TelemetryContext {
        data = typeof data === 'object' ? data : {};
        let result = new TelemetryContext();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["buildStamp"] = this.buildStamp ? this.buildStamp.toJSON() : <any>undefined;
        data["environment"] = this.environment;
        data["userAgent"] = this.userAgent;
        if (this.extras) {
            data["extras"] = {};
            for (let key in this.extras) {
                if (this.extras.hasOwnProperty(key))
                    (<any>data["extras"])[key] = (<any>this.extras)[key];
            }
        }
        return data;
    }
}

export interface ITelemetryContext {
    buildStamp?: BuildStamp;
    environment?: string | undefined;
    userAgent?: string | undefined;
    extras?: { [key: string]: string; } | undefined;
}

export enum UnitKind {
    Weight = "Weight",
    Volume = "Volume",
    Count = "Count",
}

export class UserEditOperation implements IUserEditOperation {
    action!: EditFoodSelectionType;
    groupId?: string | undefined;
    componentId?: string | undefined;
    externalFoodId?: string | undefined;
    fatSecretFoodId?: string | undefined;
    externalServingId?: string | undefined;
    fatSecretServingId?: string | undefined;
    editedQuantity?: number | undefined;
    newParentQuantity?: number | undefined;
    newParentUnit?: string | undefined;

    constructor(data?: IUserEditOperation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.action = _data["action"];
            this.groupId = _data["groupId"];
            this.componentId = _data["componentId"];
            this.externalFoodId = _data["externalFoodId"];
            this.fatSecretFoodId = _data["fatSecretFoodId"];
            this.externalServingId = _data["externalServingId"];
            this.fatSecretServingId = _data["fatSecretServingId"];
            this.editedQuantity = _data["editedQuantity"];
            this.newParentQuantity = _data["newParentQuantity"];
            this.newParentUnit = _data["newParentUnit"];
        }
    }

    static fromJS(data: any): UserEditOperation {
        data = typeof data === 'object' ? data : {};
        let result = new UserEditOperation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["action"] = this.action;
        data["groupId"] = this.groupId;
        data["componentId"] = this.componentId;
        data["externalFoodId"] = this.externalFoodId;
        data["fatSecretFoodId"] = this.fatSecretFoodId;
        data["externalServingId"] = this.externalServingId;
        data["fatSecretServingId"] = this.fatSecretServingId;
        data["editedQuantity"] = this.editedQuantity;
        data["newParentQuantity"] = this.newParentQuantity;
        data["newParentUnit"] = this.newParentUnit;
        return data;
    }
}

export interface IUserEditOperation {
    action: EditFoodSelectionType;
    groupId?: string | undefined;
    componentId?: string | undefined;
    externalFoodId?: string | undefined;
    fatSecretFoodId?: string | undefined;
    externalServingId?: string | undefined;
    fatSecretServingId?: string | undefined;
    editedQuantity?: number | undefined;
    newParentQuantity?: number | undefined;
    newParentUnit?: string | undefined;
}

export class UserSelectedServing implements IUserSelectedServing {
    originalText?: string | undefined;
    provider?: string | undefined;
    externalFoodId?: string | undefined;
    externalServingId?: string | undefined;
    fatSecretFoodId?: string | undefined;
    fatSecretServingId?: string | undefined;
    editedQuantity?: number | undefined;
    componentId?: string | undefined;

    constructor(data?: IUserSelectedServing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.originalText = _data["originalText"];
            this.provider = _data["provider"];
            this.externalFoodId = _data["externalFoodId"];
            this.externalServingId = _data["externalServingId"];
            this.fatSecretFoodId = _data["fatSecretFoodId"];
            this.fatSecretServingId = _data["fatSecretServingId"];
            this.editedQuantity = _data["editedQuantity"];
            this.componentId = _data["componentId"];
        }
    }

    static fromJS(data: any): UserSelectedServing {
        data = typeof data === 'object' ? data : {};
        let result = new UserSelectedServing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalText"] = this.originalText;
        data["provider"] = this.provider;
        data["externalFoodId"] = this.externalFoodId;
        data["externalServingId"] = this.externalServingId;
        data["fatSecretFoodId"] = this.fatSecretFoodId;
        data["fatSecretServingId"] = this.fatSecretServingId;
        data["editedQuantity"] = this.editedQuantity;
        data["componentId"] = this.componentId;
        return data;
    }
}

export interface IUserSelectedServing {
    originalText?: string | undefined;
    provider?: string | undefined;
    externalFoodId?: string | undefined;
    externalServingId?: string | undefined;
    fatSecretFoodId?: string | undefined;
    fatSecretServingId?: string | undefined;
    editedQuantity?: number | undefined;
    componentId?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}